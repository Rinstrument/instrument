// Generated by rstantools.  Do not edit by hand.

/*
    inirt is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    inirt is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with inirt.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-1-g67504470
#include <stan/model/model_header.hpp>
namespace model_inirt_hoirt_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'inirt_hoirt', line 31, column 2 to column 27)",
                                                      " (in 'inirt_hoirt', line 32, column 2 to column 20)",
                                                      " (in 'inirt_hoirt', line 33, column 2 to column 25)",
                                                      " (in 'inirt_hoirt', line 34, column 2 to column 29)",
                                                      " (in 'inirt_hoirt', line 35, column 2 to column 29)",
                                                      " (in 'inirt_hoirt', line 36, column 2 to column 29)",
                                                      " (in 'inirt_hoirt', line 37, column 2 to column 19)",
                                                      " (in 'inirt_hoirt', line 38, column 2 to column 19)",
                                                      " (in 'inirt_hoirt', line 41, column 2 to column 21)",
                                                      " (in 'inirt_hoirt', line 42, column 2 to column 20)",
                                                      " (in 'inirt_hoirt', line 43, column 2 to column 38)",
                                                      " (in 'inirt_hoirt', line 47, column 8 to column 24)",
                                                      " (in 'inirt_hoirt', line 46, column 20 to line 48, column 7)",
                                                      " (in 'inirt_hoirt', line 46, column 6 to line 48, column 7)",
                                                      " (in 'inirt_hoirt', line 45, column 18 to line 49, column 5)",
                                                      " (in 'inirt_hoirt', line 45, column 4 to line 49, column 5)",
                                                      " (in 'inirt_hoirt', line 44, column 2 to line 50, column 3)",
                                                      " (in 'inirt_hoirt', line 52, column 4 to column 19)",
                                                      " (in 'inirt_hoirt', line 53, column 4 to column 20)",
                                                      " (in 'inirt_hoirt', line 54, column 4 to column 20)",
                                                      " (in 'inirt_hoirt', line 56, column 6 to column 32)",
                                                      " (in 'inirt_hoirt', line 57, column 6 to column 30)",
                                                      " (in 'inirt_hoirt', line 59, column 8 to column 20)",
                                                      " (in 'inirt_hoirt', line 60, column 8 to column 38)",
                                                      " (in 'inirt_hoirt', line 58, column 32 to line 61, column 7)",
                                                      " (in 'inirt_hoirt', line 58, column 6 to line 61, column 7)",
                                                      " (in 'inirt_hoirt', line 55, column 18 to line 62, column 5)",
                                                      " (in 'inirt_hoirt', line 55, column 4 to line 62, column 5)",
                                                      " (in 'inirt_hoirt', line 51, column 2 to line 63, column 3)",
                                                      " (in 'inirt_hoirt', line 67, column 6 to column 21)",
                                                      " (in 'inirt_hoirt', line 66, column 18 to line 68, column 5)",
                                                      " (in 'inirt_hoirt', line 66, column 4 to line 68, column 5)",
                                                      " (in 'inirt_hoirt', line 64, column 2 to line 70, column 3)",
                                                      " (in 'inirt_hoirt', line 72, column 4 to column 19)",
                                                      " (in 'inirt_hoirt', line 73, column 4 to column 20)",
                                                      " (in 'inirt_hoirt', line 74, column 4 to column 20)",
                                                      " (in 'inirt_hoirt', line 76, column 4 to column 26)",
                                                      " (in 'inirt_hoirt', line 77, column 4 to column 24)",
                                                      " (in 'inirt_hoirt', line 79, column 6 to column 26)",
                                                      " (in 'inirt_hoirt', line 80, column 6 to column 34)",
                                                      " (in 'inirt_hoirt', line 78, column 30 to line 81, column 5)",
                                                      " (in 'inirt_hoirt', line 78, column 4 to line 81, column 5)",
                                                      " (in 'inirt_hoirt', line 71, column 2 to line 83, column 3)",
                                                      " (in 'inirt_hoirt', line 85, column 4 to column 16)",
                                                      " (in 'inirt_hoirt', line 86, column 4 to column 20)",
                                                      " (in 'inirt_hoirt', line 88, column 13 to column 25)",
                                                      " (in 'inirt_hoirt', line 88, column 6 to column 90)",
                                                      " (in 'inirt_hoirt', line 90, column 8 to column 30)",
                                                      " (in 'inirt_hoirt', line 91, column 8 to column 38)",
                                                      " (in 'inirt_hoirt', line 89, column 33 to line 92, column 7)",
                                                      " (in 'inirt_hoirt', line 89, column 6 to line 92, column 7)",
                                                      " (in 'inirt_hoirt', line 94, column 8 to column 38)",
                                                      " (in 'inirt_hoirt', line 95, column 8 to column 22)",
                                                      " (in 'inirt_hoirt', line 93, column 44 to line 96, column 7)",
                                                      " (in 'inirt_hoirt', line 93, column 6 to line 96, column 7)",
                                                      " (in 'inirt_hoirt', line 87, column 18 to line 97, column 5)",
                                                      " (in 'inirt_hoirt', line 87, column 4 to line 97, column 5)",
                                                      " (in 'inirt_hoirt', line 84, column 2 to line 98, column 3)",
                                                      " (in 'inirt_hoirt', line 101, column 2 to column 40)",
                                                      " (in 'inirt_hoirt', line 102, column 2 to column 25)",
                                                      " (in 'inirt_hoirt', line 103, column 2 to column 30)",
                                                      " (in 'inirt_hoirt', line 104, column 2 to column 25)",
                                                      " (in 'inirt_hoirt', line 105, column 2 to column 24)",
                                                      " (in 'inirt_hoirt', line 107, column 4 to column 26)",
                                                      " (in 'inirt_hoirt', line 106, column 15 to line 108, column 3)",
                                                      " (in 'inirt_hoirt', line 106, column 2 to line 108, column 3)",
                                                      " (in 'inirt_hoirt', line 110, column 11 to column 17)",
                                                      " (in 'inirt_hoirt', line 110, column 4 to column 22)",
                                                      " (in 'inirt_hoirt', line 112, column 6 to column 20)",
                                                      " (in 'inirt_hoirt', line 131, column 8 to column 153)",
                                                      " (in 'inirt_hoirt', line 130, column 13 to line 132, column 7)",
                                                      " (in 'inirt_hoirt', line 126, column 10 to column 37)",
                                                      " (in 'inirt_hoirt', line 124, column 15 to line 128, column 9)",
                                                      " (in 'inirt_hoirt', line 120, column 14 to column 44)",
                                                      " (in 'inirt_hoirt', line 119, column 19 to line 121, column 13)",
                                                      " (in 'inirt_hoirt', line 118, column 14 to column 24)",
                                                      " (in 'inirt_hoirt', line 117, column 29 to line 119, column 13)",
                                                      " (in 'inirt_hoirt', line 117, column 12 to line 121, column 13)",
                                                      " (in 'inirt_hoirt', line 115, column 24 to line 123, column 11)",
                                                      " (in 'inirt_hoirt', line 115, column 10 to line 123, column 11)",
                                                      " (in 'inirt_hoirt', line 114, column 35 to line 124, column 9)",
                                                      " (in 'inirt_hoirt', line 114, column 8 to line 128, column 9)",
                                                      " (in 'inirt_hoirt', line 129, column 8 to column 158)",
                                                      " (in 'inirt_hoirt', line 113, column 19 to line 130, column 7)",
                                                      " (in 'inirt_hoirt', line 113, column 6 to line 132, column 7)",
                                                      " (in 'inirt_hoirt', line 133, column 6 to column 115)",
                                                      " (in 'inirt_hoirt', line 111, column 24 to line 134, column 5)",
                                                      " (in 'inirt_hoirt', line 111, column 4 to line 134, column 5)",
                                                      " (in 'inirt_hoirt', line 109, column 2 to line 135, column 3)",
                                                      " (in 'inirt_hoirt', line 2, column 2 to column 17)",
                                                      " (in 'inirt_hoirt', line 3, column 2 to column 17)",
                                                      " (in 'inirt_hoirt', line 4, column 2 to column 17)",
                                                      " (in 'inirt_hoirt', line 5, column 2 to column 26)",
                                                      " (in 'inirt_hoirt', line 6, column 40 to column 41)",
                                                      " (in 'inirt_hoirt', line 6, column 2 to column 43)",
                                                      " (in 'inirt_hoirt', line 7, column 2 to column 22)",
                                                      " (in 'inirt_hoirt', line 8, column 26 to column 32)",
                                                      " (in 'inirt_hoirt', line 8, column 2 to column 34)",
                                                      " (in 'inirt_hoirt', line 9, column 26 to column 32)",
                                                      " (in 'inirt_hoirt', line 9, column 2 to column 34)",
                                                      " (in 'inirt_hoirt', line 10, column 34 to column 40)",
                                                      " (in 'inirt_hoirt', line 10, column 2 to column 42)",
                                                      " (in 'inirt_hoirt', line 11, column 9 to column 15)",
                                                      " (in 'inirt_hoirt', line 11, column 17 to column 18)",
                                                      " (in 'inirt_hoirt', line 11, column 2 to column 22)",
                                                      " (in 'inirt_hoirt', line 12, column 2 to column 17)",
                                                      " (in 'inirt_hoirt', line 13, column 2 to column 22)",
                                                      " (in 'inirt_hoirt', line 14, column 2 to column 17)",
                                                      " (in 'inirt_hoirt', line 15, column 2 to column 32)",
                                                      " (in 'inirt_hoirt', line 16, column 28 to column 29)",
                                                      " (in 'inirt_hoirt', line 16, column 2 to column 31)",
                                                      " (in 'inirt_hoirt', line 17, column 26 to column 27)",
                                                      " (in 'inirt_hoirt', line 17, column 2 to column 29)",
                                                      " (in 'inirt_hoirt', line 18, column 34 to column 40)",
                                                      " (in 'inirt_hoirt', line 18, column 2 to column 42)",
                                                      " (in 'inirt_hoirt', line 19, column 2 to column 27)",
                                                      " (in 'inirt_hoirt', line 20, column 2 to column 25)",
                                                      " (in 'inirt_hoirt', line 21, column 15 to column 21)",
                                                      " (in 'inirt_hoirt', line 21, column 2 to column 23)",
                                                      " (in 'inirt_hoirt', line 22, column 9 to column 15)",
                                                      " (in 'inirt_hoirt', line 22, column 17 to column 18)",
                                                      " (in 'inirt_hoirt', line 22, column 2 to column 27)",
                                                      " (in 'inirt_hoirt', line 23, column 15 to column 16)",
                                                      " (in 'inirt_hoirt', line 23, column 18 to column 19)",
                                                      " (in 'inirt_hoirt', line 23, column 2 to column 21)",
                                                      " (in 'inirt_hoirt', line 24, column 43 to column 49)",
                                                      " (in 'inirt_hoirt', line 24, column 2 to column 51)",
                                                      " (in 'inirt_hoirt', line 25, column 2 to column 24)",
                                                      " (in 'inirt_hoirt', line 26, column 2 to column 24)",
                                                      " (in 'inirt_hoirt', line 27, column 9 to column 10)",
                                                      " (in 'inirt_hoirt', line 27, column 12 to column 20)",
                                                      " (in 'inirt_hoirt', line 27, column 2 to column 31)",
                                                      " (in 'inirt_hoirt', line 28, column 9 to column 10)",
                                                      " (in 'inirt_hoirt', line 28, column 12 to column 20)",
                                                      " (in 'inirt_hoirt', line 28, column 2 to column 31)",
                                                      " (in 'inirt_hoirt', line 31, column 9 to column 10)",
                                                      " (in 'inirt_hoirt', line 31, column 12 to column 13)",
                                                      " (in 'inirt_hoirt', line 32, column 9 to column 10)",
                                                      " (in 'inirt_hoirt', line 33, column 9 to column 15)",
                                                      " (in 'inirt_hoirt', line 34, column 9 to column 17)",
                                                      " (in 'inirt_hoirt', line 35, column 18 to column 19)",
                                                      " (in 'inirt_hoirt', line 36, column 9 to column 17)",
                                                      " (in 'inirt_hoirt', line 37, column 9 to column 10)",
                                                      " (in 'inirt_hoirt', line 38, column 9 to column 10)",
                                                      " (in 'inirt_hoirt', line 41, column 9 to column 10)",
                                                      " (in 'inirt_hoirt', line 41, column 12 to column 13)",
                                                      " (in 'inirt_hoirt', line 42, column 9 to column 10)",
                                                      " (in 'inirt_hoirt', line 42, column 12 to column 13)",
                                                      " (in 'inirt_hoirt', line 43, column 35 to column 36)",
                                                      " (in 'inirt_hoirt', line 43, column 9 to column 21)"};
#include <stan_meta_header.hpp>
class model_inirt_hoirt final : public model_base_crtp<model_inirt_hoirt> {
private:
  int N;
  int J;
  int K;
  int Ncateg_max;
  std::vector<int> Ncategi;
  int N_long;
  std::vector<int> nn;
  std::vector<int> jj;
  std::vector<int> y;
  Eigen::Matrix<double, -1, -1> x;
  int D;
  int nDelta;
  int L;
  int has_treg;
  std::vector<int> alpha_dstart;
  std::vector<int> alpha_dend;
  std::vector<int> lambda_ind;
  int beta_dstart;
  int beta_dend;
  std::vector<double> weights;
  Eigen::Matrix<double, -1, -1> x_miss;
  std::vector<std::vector<int>> reg_miss;
  std::vector<int> x_in_row_is_missing;
  int nDelta_r;
  int nAlpha_r;
  Eigen::Matrix<double, -1, -1> d_design;
  Eigen::Matrix<double, -1, -1> a_design;
  int delta_trans_2dim__;
 
public:
  ~model_inirt_hoirt() { }
  
  inline std::string model_name() const final { return "model_inirt_hoirt"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-1-g67504470", "stancflags = "};
  }
  
  
  model_inirt_hoirt(stan::io::var_context& context__,
                    unsigned int random_seed__ = 0,
                    std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_inirt_hoirt_namespace::model_inirt_hoirt";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 90;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 90;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 90;
      current_statement__ = 90;
      check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 91;
      context__.validate_dims("data initialization","J","int",
          context__.to_vec());
      J = std::numeric_limits<int>::min();
      
      current_statement__ = 91;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 91;
      current_statement__ = 91;
      check_greater_or_equal(function__, "J", J, 1);
      current_statement__ = 92;
      context__.validate_dims("data initialization","K","int",
          context__.to_vec());
      K = std::numeric_limits<int>::min();
      
      current_statement__ = 92;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 92;
      current_statement__ = 92;
      check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 93;
      context__.validate_dims("data initialization","Ncateg_max","int",
          context__.to_vec());
      Ncateg_max = std::numeric_limits<int>::min();
      
      current_statement__ = 93;
      Ncateg_max = context__.vals_i("Ncateg_max")[(1 - 1)];
      current_statement__ = 93;
      current_statement__ = 93;
      check_greater_or_equal(function__, "Ncateg_max", Ncateg_max, 2);
      current_statement__ = 94;
      validate_non_negative_index("Ncategi", "J", J);
      current_statement__ = 95;
      context__.validate_dims("data initialization","Ncategi","int",
          context__.to_vec(J));
      Ncategi = std::vector<int>(J, std::numeric_limits<int>::min());
      
      current_statement__ = 95;
      assign(Ncategi, nil_index_list(), context__.vals_i("Ncategi"),
        "assigning variable Ncategi");
      current_statement__ = 95;
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 95;
        current_statement__ = 95;
        check_greater_or_equal(function__, "Ncategi[sym1__]",
                               Ncategi[(sym1__ - 1)], 2);}
      current_statement__ = 95;
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 95;
        current_statement__ = 95;
        check_less_or_equal(function__, "Ncategi[sym1__]",
                            Ncategi[(sym1__ - 1)], Ncateg_max);}
      current_statement__ = 96;
      context__.validate_dims("data initialization","N_long","int",
          context__.to_vec());
      N_long = std::numeric_limits<int>::min();
      
      current_statement__ = 96;
      N_long = context__.vals_i("N_long")[(1 - 1)];
      current_statement__ = 96;
      current_statement__ = 96;
      check_greater_or_equal(function__, "N_long", N_long, 1);
      current_statement__ = 97;
      validate_non_negative_index("nn", "N_long", N_long);
      current_statement__ = 98;
      context__.validate_dims("data initialization","nn","int",
          context__.to_vec(N_long));
      nn = std::vector<int>(N_long, std::numeric_limits<int>::min());
      
      current_statement__ = 98;
      assign(nn, nil_index_list(), context__.vals_i("nn"),
        "assigning variable nn");
      current_statement__ = 98;
      for (int sym1__ = 1; sym1__ <= N_long; ++sym1__) {
        current_statement__ = 98;
        current_statement__ = 98;
        check_greater_or_equal(function__, "nn[sym1__]", nn[(sym1__ - 1)], 1);
      }
      current_statement__ = 98;
      for (int sym1__ = 1; sym1__ <= N_long; ++sym1__) {
        current_statement__ = 98;
        current_statement__ = 98;
        check_less_or_equal(function__, "nn[sym1__]", nn[(sym1__ - 1)], N);}
      current_statement__ = 99;
      validate_non_negative_index("jj", "N_long", N_long);
      current_statement__ = 100;
      context__.validate_dims("data initialization","jj","int",
          context__.to_vec(N_long));
      jj = std::vector<int>(N_long, std::numeric_limits<int>::min());
      
      current_statement__ = 100;
      assign(jj, nil_index_list(), context__.vals_i("jj"),
        "assigning variable jj");
      current_statement__ = 100;
      for (int sym1__ = 1; sym1__ <= N_long; ++sym1__) {
        current_statement__ = 100;
        current_statement__ = 100;
        check_greater_or_equal(function__, "jj[sym1__]", jj[(sym1__ - 1)], 1);
      }
      current_statement__ = 100;
      for (int sym1__ = 1; sym1__ <= N_long; ++sym1__) {
        current_statement__ = 100;
        current_statement__ = 100;
        check_less_or_equal(function__, "jj[sym1__]", jj[(sym1__ - 1)], J);}
      current_statement__ = 101;
      validate_non_negative_index("y", "N_long", N_long);
      current_statement__ = 102;
      context__.validate_dims("data initialization","y","int",
          context__.to_vec(N_long));
      y = std::vector<int>(N_long, std::numeric_limits<int>::min());
      
      current_statement__ = 102;
      assign(y, nil_index_list(), context__.vals_i("y"),
        "assigning variable y");
      current_statement__ = 102;
      for (int sym1__ = 1; sym1__ <= N_long; ++sym1__) {
        current_statement__ = 102;
        current_statement__ = 102;
        check_greater_or_equal(function__, "y[sym1__]", y[(sym1__ - 1)], 0);}
      current_statement__ = 102;
      for (int sym1__ = 1; sym1__ <= N_long; ++sym1__) {
        current_statement__ = 102;
        current_statement__ = 102;
        check_less_or_equal(function__, "y[sym1__]", y[(sym1__ - 1)],
                            Ncateg_max);}
      current_statement__ = 103;
      validate_non_negative_index("x", "N_long", N_long);
      current_statement__ = 104;
      validate_non_negative_index("x", "K", K);
      current_statement__ = 105;
      context__.validate_dims("data initialization","x","double",
          context__.to_vec(N_long, K));
      x = Eigen::Matrix<double, -1, -1>(N_long, K);
      stan::math::fill(x, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 105;
        assign(x_flat__, nil_index_list(), context__.vals_r("x"),
          "assigning variable x_flat__");
        current_statement__ = 105;
        pos__ = 1;
        current_statement__ = 105;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 105;
          for (int sym2__ = 1; sym2__ <= N_long; ++sym2__) {
            current_statement__ = 105;
            assign(x,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              x_flat__[(pos__ - 1)], "assigning variable x");
            current_statement__ = 105;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 106;
      context__.validate_dims("data initialization","D","int",
          context__.to_vec());
      D = std::numeric_limits<int>::min();
      
      current_statement__ = 106;
      D = context__.vals_i("D")[(1 - 1)];
      current_statement__ = 106;
      current_statement__ = 106;
      check_greater_or_equal(function__, "D", D, 1);
      current_statement__ = 107;
      context__.validate_dims("data initialization","nDelta","int",
          context__.to_vec());
      nDelta = std::numeric_limits<int>::min();
      
      current_statement__ = 107;
      nDelta = context__.vals_i("nDelta")[(1 - 1)];
      current_statement__ = 107;
      current_statement__ = 107;
      check_greater_or_equal(function__, "nDelta", nDelta, 1);
      current_statement__ = 108;
      context__.validate_dims("data initialization","L","int",
          context__.to_vec());
      L = std::numeric_limits<int>::min();
      
      current_statement__ = 108;
      L = context__.vals_i("L")[(1 - 1)];
      current_statement__ = 108;
      current_statement__ = 108;
      check_greater_or_equal(function__, "L", L, 1);
      current_statement__ = 109;
      context__.validate_dims("data initialization","has_treg","int",
          context__.to_vec());
      has_treg = std::numeric_limits<int>::min();
      
      current_statement__ = 109;
      has_treg = context__.vals_i("has_treg")[(1 - 1)];
      current_statement__ = 109;
      current_statement__ = 109;
      check_greater_or_equal(function__, "has_treg", has_treg, 0);
      current_statement__ = 109;
      current_statement__ = 109;
      check_less_or_equal(function__, "has_treg", has_treg, 1);
      current_statement__ = 110;
      validate_non_negative_index("alpha_dstart", "D", D);
      current_statement__ = 111;
      context__.validate_dims("data initialization","alpha_dstart","int",
          context__.to_vec(D));
      alpha_dstart = std::vector<int>(D, std::numeric_limits<int>::min());
      
      current_statement__ = 111;
      assign(alpha_dstart, nil_index_list(),
        context__.vals_i("alpha_dstart"), "assigning variable alpha_dstart");
      current_statement__ = 111;
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        current_statement__ = 111;
        current_statement__ = 111;
        check_greater_or_equal(function__, "alpha_dstart[sym1__]",
                               alpha_dstart[(sym1__ - 1)], 1);}
      current_statement__ = 112;
      validate_non_negative_index("alpha_dend", "D", D);
      current_statement__ = 113;
      context__.validate_dims("data initialization","alpha_dend","int",
          context__.to_vec(D));
      alpha_dend = std::vector<int>(D, std::numeric_limits<int>::min());
      
      current_statement__ = 113;
      assign(alpha_dend, nil_index_list(), context__.vals_i("alpha_dend"),
        "assigning variable alpha_dend");
      current_statement__ = 113;
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        current_statement__ = 113;
        current_statement__ = 113;
        check_greater_or_equal(function__, "alpha_dend[sym1__]",
                               alpha_dend[(sym1__ - 1)], 1);}
      current_statement__ = 114;
      validate_non_negative_index("lambda_ind", "N_long", N_long);
      current_statement__ = 115;
      context__.validate_dims("data initialization","lambda_ind","int",
          context__.to_vec(N_long));
      lambda_ind = std::vector<int>(N_long, std::numeric_limits<int>::min());
      
      current_statement__ = 115;
      assign(lambda_ind, nil_index_list(), context__.vals_i("lambda_ind"),
        "assigning variable lambda_ind");
      current_statement__ = 115;
      for (int sym1__ = 1; sym1__ <= N_long; ++sym1__) {
        current_statement__ = 115;
        current_statement__ = 115;
        check_greater_or_equal(function__, "lambda_ind[sym1__]",
                               lambda_ind[(sym1__ - 1)], 1);}
      current_statement__ = 115;
      for (int sym1__ = 1; sym1__ <= N_long; ++sym1__) {
        current_statement__ = 115;
        current_statement__ = 115;
        check_less_or_equal(function__, "lambda_ind[sym1__]",
                            lambda_ind[(sym1__ - 1)], D);}
      current_statement__ = 116;
      context__.validate_dims("data initialization","beta_dstart","int",
          context__.to_vec());
      beta_dstart = std::numeric_limits<int>::min();
      
      current_statement__ = 116;
      beta_dstart = context__.vals_i("beta_dstart")[(1 - 1)];
      current_statement__ = 116;
      current_statement__ = 116;
      check_greater_or_equal(function__, "beta_dstart", beta_dstart, 1);
      current_statement__ = 117;
      context__.validate_dims("data initialization","beta_dend","int",
          context__.to_vec());
      beta_dend = std::numeric_limits<int>::min();
      
      current_statement__ = 117;
      beta_dend = context__.vals_i("beta_dend")[(1 - 1)];
      current_statement__ = 117;
      current_statement__ = 117;
      check_greater_or_equal(function__, "beta_dend", beta_dend, 1);
      current_statement__ = 118;
      validate_non_negative_index("weights", "N_long", N_long);
      current_statement__ = 119;
      context__.validate_dims("data initialization","weights","double",
          context__.to_vec(N_long));
      weights = std::vector<double>(N_long, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 119;
      assign(weights, nil_index_list(), context__.vals_r("weights"),
        "assigning variable weights");
      current_statement__ = 120;
      validate_non_negative_index("x_miss", "N_long", N_long);
      current_statement__ = 121;
      validate_non_negative_index("x_miss", "K", K);
      current_statement__ = 122;
      context__.validate_dims("data initialization","x_miss","double",
          context__.to_vec(N_long, K));
      x_miss = Eigen::Matrix<double, -1, -1>(N_long, K);
      stan::math::fill(x_miss, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x_miss_flat__;
        current_statement__ = 122;
        assign(x_miss_flat__, nil_index_list(), context__.vals_r("x_miss"),
          "assigning variable x_miss_flat__");
        current_statement__ = 122;
        pos__ = 1;
        current_statement__ = 122;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 122;
          for (int sym2__ = 1; sym2__ <= N_long; ++sym2__) {
            current_statement__ = 122;
            assign(x_miss,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              x_miss_flat__[(pos__ - 1)], "assigning variable x_miss");
            current_statement__ = 122;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 123;
      validate_non_negative_index("reg_miss", "N", N);
      current_statement__ = 124;
      validate_non_negative_index("reg_miss", "K", K);
      current_statement__ = 125;
      context__.validate_dims("data initialization","reg_miss","int",
          context__.to_vec(N, K));
      reg_miss = std::vector<std::vector<int>>(N, std::vector<int>(K, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> reg_miss_flat__;
        current_statement__ = 125;
        assign(reg_miss_flat__, nil_index_list(),
          context__.vals_i("reg_miss"), "assigning variable reg_miss_flat__");
        current_statement__ = 125;
        pos__ = 1;
        current_statement__ = 125;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 125;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 125;
            assign(reg_miss,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              reg_miss_flat__[(pos__ - 1)], "assigning variable reg_miss");
            current_statement__ = 125;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 126;
      validate_non_negative_index("x_in_row_is_missing", "N_long", N_long);
      current_statement__ = 127;
      context__.validate_dims("data initialization","x_in_row_is_missing",
          "int",context__.to_vec(N_long));
      x_in_row_is_missing = std::vector<int>(N_long, std::numeric_limits<int>::min());
      
      current_statement__ = 127;
      assign(x_in_row_is_missing, nil_index_list(),
        context__.vals_i("x_in_row_is_missing"),
        "assigning variable x_in_row_is_missing");
      current_statement__ = 127;
      for (int sym1__ = 1; sym1__ <= N_long; ++sym1__) {
        current_statement__ = 127;
        current_statement__ = 127;
        check_greater_or_equal(function__, "x_in_row_is_missing[sym1__]",
                               x_in_row_is_missing[(sym1__ - 1)], 0);}
      current_statement__ = 127;
      for (int sym1__ = 1; sym1__ <= N_long; ++sym1__) {
        current_statement__ = 127;
        current_statement__ = 127;
        check_less_or_equal(function__, "x_in_row_is_missing[sym1__]",
                            x_in_row_is_missing[(sym1__ - 1)], 1);}
      current_statement__ = 128;
      context__.validate_dims("data initialization","nDelta_r","int",
          context__.to_vec());
      nDelta_r = std::numeric_limits<int>::min();
      
      current_statement__ = 128;
      nDelta_r = context__.vals_i("nDelta_r")[(1 - 1)];
      current_statement__ = 128;
      current_statement__ = 128;
      check_greater_or_equal(function__, "nDelta_r", nDelta_r, 1);
      current_statement__ = 129;
      context__.validate_dims("data initialization","nAlpha_r","int",
          context__.to_vec());
      nAlpha_r = std::numeric_limits<int>::min();
      
      current_statement__ = 129;
      nAlpha_r = context__.vals_i("nAlpha_r")[(1 - 1)];
      current_statement__ = 129;
      current_statement__ = 129;
      check_greater_or_equal(function__, "nAlpha_r", nAlpha_r, 1);
      current_statement__ = 130;
      validate_non_negative_index("d_design", "N", N);
      current_statement__ = 131;
      validate_non_negative_index("d_design", "nDelta_r", nDelta_r);
      current_statement__ = 132;
      context__.validate_dims("data initialization","d_design","double",
          context__.to_vec(N, nDelta_r));
      d_design = Eigen::Matrix<double, -1, -1>(N, nDelta_r);
      stan::math::fill(d_design, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> d_design_flat__;
        current_statement__ = 132;
        assign(d_design_flat__, nil_index_list(),
          context__.vals_r("d_design"), "assigning variable d_design_flat__");
        current_statement__ = 132;
        pos__ = 1;
        current_statement__ = 132;
        for (int sym1__ = 1; sym1__ <= nDelta_r; ++sym1__) {
          current_statement__ = 132;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 132;
            assign(d_design,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              d_design_flat__[(pos__ - 1)], "assigning variable d_design");
            current_statement__ = 132;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 133;
      validate_non_negative_index("a_design", "N", N);
      current_statement__ = 134;
      validate_non_negative_index("a_design", "nAlpha_r", nAlpha_r);
      current_statement__ = 135;
      context__.validate_dims("data initialization","a_design","double",
          context__.to_vec(N, nAlpha_r));
      a_design = Eigen::Matrix<double, -1, -1>(N, nAlpha_r);
      stan::math::fill(a_design, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> a_design_flat__;
        current_statement__ = 135;
        assign(a_design_flat__, nil_index_list(),
          context__.vals_r("a_design"), "assigning variable a_design_flat__");
        current_statement__ = 135;
        pos__ = 1;
        current_statement__ = 135;
        for (int sym1__ = 1; sym1__ <= nAlpha_r; ++sym1__) {
          current_statement__ = 135;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 135;
            assign(a_design,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              a_design_flat__[(pos__ - 1)], "assigning variable a_design");
            current_statement__ = 135;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 136;
      validate_non_negative_index("theta_resid", "N", N);
      current_statement__ = 137;
      validate_non_negative_index("theta_resid", "D", D);
      current_statement__ = 138;
      validate_non_negative_index("theta_g", "N", N);
      current_statement__ = 139;
      validate_non_negative_index("delta_l", "nDelta", nDelta);
      current_statement__ = 140;
      validate_non_negative_index("delta_r_l", "nDelta_r", nDelta_r);
      current_statement__ = 141;
      validate_non_negative_index("alpha_l", "L", L);
      current_statement__ = 142;
      validate_non_negative_index("alpha_r_l", "nAlpha_r", nAlpha_r);
      current_statement__ = 143;
      validate_non_negative_index("lambda", "D", D);
      current_statement__ = 144;
      validate_non_negative_index("beta_l", "K", K);
      current_statement__ = 145;
      validate_non_negative_index("alpha", "D", D);
      current_statement__ = 146;
      validate_non_negative_index("alpha", "J", J);
      current_statement__ = 147;
      validate_non_negative_index("beta", "K", K);
      current_statement__ = 148;
      validate_non_negative_index("beta", "1", 1);
      current_statement__ = 149;
      validate_non_negative_index("delta_trans", "J", J);
      current_statement__ = 150;
      delta_trans_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 150;
      delta_trans_2dim__ = (Ncateg_max - 1);
      current_statement__ = 150;
      validate_non_negative_index("delta_trans", "Ncateg_max - 1",
                                  delta_trans_2dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += N * D;
      num_params_r__ += N;
      num_params_r__ += nDelta;
      num_params_r__ += nDelta_r;
      num_params_r__ += L;
      num_params_r__ += nAlpha_r;
      num_params_r__ += D;
      num_params_r__ += K;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_inirt_hoirt_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, -1> theta_resid;
      theta_resid = Eigen::Matrix<local_scalar_t__, -1, -1>(N, D);
      stan::math::fill(theta_resid, DUMMY_VAR__);
      
      current_statement__ = 1;
      theta_resid = in__.matrix(N, D);
      Eigen::Matrix<local_scalar_t__, -1, 1> theta_g;
      theta_g = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(theta_g, DUMMY_VAR__);
      
      current_statement__ = 2;
      theta_g = in__.vector(N);
      Eigen::Matrix<local_scalar_t__, -1, 1> delta_l;
      delta_l = Eigen::Matrix<local_scalar_t__, -1, 1>(nDelta);
      stan::math::fill(delta_l, DUMMY_VAR__);
      
      current_statement__ = 3;
      delta_l = in__.vector(nDelta);
      Eigen::Matrix<local_scalar_t__, -1, 1> delta_r_l;
      delta_r_l = Eigen::Matrix<local_scalar_t__, -1, 1>(nDelta_r);
      stan::math::fill(delta_r_l, DUMMY_VAR__);
      
      current_statement__ = 4;
      delta_r_l = in__.vector(nDelta_r);
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha_l;
      alpha_l = Eigen::Matrix<local_scalar_t__, -1, 1>(L);
      stan::math::fill(alpha_l, DUMMY_VAR__);
      
      current_statement__ = 5;
      alpha_l = in__.vector(L);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 5;
        if (jacobian__) {
          current_statement__ = 5;
          assign(alpha_l, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha_l[(sym1__ - 1)], 0, lp__),
            "assigning variable alpha_l");
        } else {
          current_statement__ = 5;
          assign(alpha_l, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha_l[(sym1__ - 1)], 0),
            "assigning variable alpha_l");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha_r_l;
      alpha_r_l = Eigen::Matrix<local_scalar_t__, -1, 1>(nAlpha_r);
      stan::math::fill(alpha_r_l, DUMMY_VAR__);
      
      current_statement__ = 6;
      alpha_r_l = in__.vector(nAlpha_r);
      Eigen::Matrix<local_scalar_t__, -1, 1> lambda;
      lambda = Eigen::Matrix<local_scalar_t__, -1, 1>(D);
      stan::math::fill(lambda, DUMMY_VAR__);
      
      current_statement__ = 7;
      lambda = in__.vector(D);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_l;
      beta_l = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(beta_l, DUMMY_VAR__);
      
      current_statement__ = 8;
      beta_l = in__.vector(K);
      Eigen::Matrix<local_scalar_t__, -1, -1> alpha;
      alpha = Eigen::Matrix<local_scalar_t__, -1, -1>(D, J);
      stan::math::fill(alpha, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> beta;
      beta = Eigen::Matrix<local_scalar_t__, -1, -1>(K, 1);
      stan::math::fill(beta, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> delta_trans;
      delta_trans = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(J, Eigen::Matrix<local_scalar_t__, -1, 1>(delta_trans_2dim__));
      stan::math::fill(delta_trans, DUMMY_VAR__);
      
      {
        current_statement__ = 16;
        for (int d = 1; d <= D; ++d) {
          current_statement__ = 14;
          for (int j = 1; j <= J; ++j) {
            current_statement__ = 12;
            assign(alpha,
              cons_list(index_uni(d),
                cons_list(index_uni(j), nil_index_list())), 0,
              "assigning variable alpha");}}
      }
      {
        int aindex;
        aindex = std::numeric_limits<int>::min();
        
        current_statement__ = 18;
        aindex = 0;
        int a_lower;
        a_lower = std::numeric_limits<int>::min();
        
        current_statement__ = 19;
        a_lower = 0;
        int a_upper;
        a_upper = std::numeric_limits<int>::min();
        
        current_statement__ = 20;
        a_upper = 0;
        current_statement__ = 28;
        for (int d = 1; d <= D; ++d) {
          current_statement__ = 21;
          a_lower = alpha_dstart[(d - 1)];
          current_statement__ = 22;
          a_upper = alpha_dend[(d - 1)];
          current_statement__ = 26;
          for (int i = a_lower; i <= a_upper; ++i) {
            current_statement__ = 23;
            aindex = (aindex + 1);
            current_statement__ = 24;
            assign(alpha,
              cons_list(index_uni(d),
                cons_list(index_uni(i), nil_index_list())),
              alpha_l[(aindex - 1)], "assigning variable alpha");}}
      }
      {
        current_statement__ = 32;
        for (int i = 1; i <= K; ++i) {
          current_statement__ = 30;
          assign(beta,
            cons_list(index_uni(i),
              cons_list(index_uni(1), nil_index_list())), 0,
            "assigning variable beta");}
      }
      {
        int bindex;
        bindex = std::numeric_limits<int>::min();
        
        current_statement__ = 34;
        bindex = 0;
        int b_lower;
        b_lower = std::numeric_limits<int>::min();
        
        current_statement__ = 35;
        b_lower = 0;
        int b_upper;
        b_upper = std::numeric_limits<int>::min();
        
        current_statement__ = 36;
        b_upper = 0;
        current_statement__ = 37;
        b_lower = beta_dstart;
        current_statement__ = 38;
        b_upper = beta_dend;
        current_statement__ = 42;
        for (int i = b_lower; i <= b_upper; ++i) {
          current_statement__ = 39;
          bindex = (bindex + 1);
          current_statement__ = 40;
          assign(beta,
            cons_list(index_uni(i),
              cons_list(index_uni(1), nil_index_list())),
            beta_l[(bindex - 1)], "assigning variable beta");}
      }
      {
        int idx;
        idx = std::numeric_limits<int>::min();
        
        current_statement__ = 44;
        idx = 0;
        int d_index;
        d_index = std::numeric_limits<int>::min();
        
        current_statement__ = 45;
        d_index = 0;
        current_statement__ = 57;
        for (int j = 1; j <= J; ++j) {
          current_statement__ = 46;
          validate_non_negative_index("ds_ind", "Ncategi[j] - 1",
                                      (Ncategi[(j - 1)] - 1));
          Eigen::Matrix<local_scalar_t__, -1, 1> ds_ind;
          ds_ind = Eigen::Matrix<local_scalar_t__, -1, 1>((Ncategi[(j - 1)] -
                                                            1));
          stan::math::fill(ds_ind, DUMMY_VAR__);
          
          current_statement__ = 47;
          assign(ds_ind, nil_index_list(),
            sort_asc(
              rvalue(delta_l,
                cons_list(
                  index_min_max((d_index + 1), ((d_index + Ncategi[(j - 1)])
                                                 - 1)), nil_index_list()),
                "delta_l")), "assigning variable ds_ind");
          current_statement__ = 51;
          for (int i = 1; i <= (Ncategi[(j - 1)] - 1); ++i) {
            current_statement__ = 48;
            d_index = (d_index + 1);
            current_statement__ = 49;
            assign(delta_trans,
              cons_list(index_uni(j),
                cons_list(index_uni(i), nil_index_list())), ds_ind[(i - 1)],
              "assigning variable delta_trans");}
          current_statement__ = 55;
          for (int i = Ncategi[(j - 1)]; i <= (Ncateg_max - 1); ++i) {
            current_statement__ = 52;
            assign(delta_trans,
              cons_list(index_uni(j),
                cons_list(index_uni(i), nil_index_list())), (1e7 + idx),
              "assigning variable delta_trans");
            current_statement__ = 53;
            idx = (idx + 1);}}
      }
      {
        current_statement__ = 59;
        lp_accum__.add(normal_lpdf<propto__>(to_vector(theta_resid), 0, 1));
        current_statement__ = 60;
        lp_accum__.add(normal_lpdf<propto__>(theta_g, 0, 1));
        current_statement__ = 61;
        lp_accum__.add(lognormal_lpdf<propto__>(alpha_l, 0, 0.3));
        current_statement__ = 62;
        lp_accum__.add(normal_lpdf<propto__>(delta_l, 0, 1));
        current_statement__ = 63;
        lp_accum__.add(normal_lpdf<propto__>(lambda, 0, 5));
        current_statement__ = 66;
        if (has_treg) {
          current_statement__ = 64;
          lp_accum__.add(normal_lpdf<propto__>(beta_l, 0, 5));
        } 
        {
          current_statement__ = 67;
          validate_non_negative_index("nu", "N_long", N_long);
          Eigen::Matrix<local_scalar_t__, -1, 1> nu;
          nu = Eigen::Matrix<local_scalar_t__, -1, 1>(N_long);
          stan::math::fill(nu, DUMMY_VAR__);
          
          current_statement__ = 88;
          for (int i = 1; i <= N_long; ++i) {
            local_scalar_t__ xb;
            xb = DUMMY_VAR__;
            
            current_statement__ = 69;
            xb = 0.0;
            current_statement__ = 85;
            if (has_treg) {
              current_statement__ = 82;
              if (x_in_row_is_missing[(i - 1)]) {
                current_statement__ = 80;
                for (int k = 1; k <= K; ++k) {
                  current_statement__ = 78;
                  if (as_bool(
                        rvalue(x_miss,
                          cons_list(index_uni(i),
                            cons_list(index_uni(k), nil_index_list())),
                          "x_miss"))) {
                    current_statement__ = 76;
                    xb = (xb + 0.0);
                  } else {
                    current_statement__ = 74;
                    xb = (xb +
                           (rvalue(x,
                              cons_list(index_uni(nn[(i - 1)]),
                                cons_list(index_uni(k), nil_index_list())),
                              "x") *
                             rvalue(beta,
                               cons_list(index_uni(k),
                                 cons_list(index_uni(1), nil_index_list())),
                               "beta")));
                  }}
              } else {
                current_statement__ = 72;
                xb = multiply(
                       rvalue(x,
                         cons_list(index_uni(nn[(i - 1)]),
                           cons_list(index_omni(), nil_index_list())), "x"),
                       rvalue(beta,
                         cons_list(index_omni(),
                           cons_list(index_uni(1), nil_index_list())),
                         "beta"));
              }
              current_statement__ = 83;
              assign(nu, cons_list(index_uni(i), nil_index_list()),
                (((lambda[(lambda_ind[(i - 1)] - 1)] *
                    (theta_g[(nn[(i - 1)] - 1)] + xb)) +
                   rvalue(theta_resid,
                     cons_list(index_uni(nn[(i - 1)]),
                       cons_list(index_uni(lambda_ind[(i - 1)]),
                         nil_index_list())), "theta_resid")) *
                  (rvalue(alpha,
                     cons_list(index_uni(lambda_ind[(i - 1)]),
                       cons_list(index_uni(jj[(i - 1)]), nil_index_list())),
                     "alpha") +
                    multiply(
                      rvalue(a_design,
                        cons_list(index_uni(nn[(i - 1)]),
                          cons_list(index_omni(), nil_index_list())),
                        "a_design"), alpha_r_l))), "assigning variable nu");
            } else {
              current_statement__ = 70;
              assign(nu, cons_list(index_uni(i), nil_index_list()),
                (((lambda[(lambda_ind[(i - 1)] - 1)] *
                    theta_g[(nn[(i - 1)] - 1)]) +
                   rvalue(theta_resid,
                     cons_list(index_uni(nn[(i - 1)]),
                       cons_list(index_uni(lambda_ind[(i - 1)]),
                         nil_index_list())), "theta_resid")) *
                  (rvalue(alpha,
                     cons_list(index_uni(lambda_ind[(i - 1)]),
                       cons_list(index_uni(jj[(i - 1)]), nil_index_list())),
                     "alpha") +
                    multiply(
                      rvalue(a_design,
                        cons_list(index_uni(nn[(i - 1)]),
                          cons_list(index_omni(), nil_index_list())),
                        "a_design"), alpha_r_l))), "assigning variable nu");
            }
            current_statement__ = 86;
            lp_accum__.add(
              (ordered_logistic_lpmf<false>(y[(i - 1)], nu[(i - 1)],
                 add(delta_trans[(jj[(i - 1)] - 1)],
                   multiply(
                     rvalue(d_design,
                       cons_list(index_uni(nn[(i - 1)]),
                         cons_list(index_omni(), nil_index_list())),
                       "d_design"), delta_r_l))) * weights[(i - 1)]));}
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_inirt_hoirt_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, -1> theta_resid;
      theta_resid = Eigen::Matrix<double, -1, -1>(N, D);
      stan::math::fill(theta_resid, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      theta_resid = in__.matrix(N, D);
      Eigen::Matrix<double, -1, 1> theta_g;
      theta_g = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(theta_g, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      theta_g = in__.vector(N);
      Eigen::Matrix<double, -1, 1> delta_l;
      delta_l = Eigen::Matrix<double, -1, 1>(nDelta);
      stan::math::fill(delta_l, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      delta_l = in__.vector(nDelta);
      Eigen::Matrix<double, -1, 1> delta_r_l;
      delta_r_l = Eigen::Matrix<double, -1, 1>(nDelta_r);
      stan::math::fill(delta_r_l, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      delta_r_l = in__.vector(nDelta_r);
      Eigen::Matrix<double, -1, 1> alpha_l;
      alpha_l = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(alpha_l, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      alpha_l = in__.vector(L);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 5;
        assign(alpha_l, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(alpha_l[(sym1__ - 1)], 0),
          "assigning variable alpha_l");}
      Eigen::Matrix<double, -1, 1> alpha_r_l;
      alpha_r_l = Eigen::Matrix<double, -1, 1>(nAlpha_r);
      stan::math::fill(alpha_r_l, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      alpha_r_l = in__.vector(nAlpha_r);
      Eigen::Matrix<double, -1, 1> lambda;
      lambda = Eigen::Matrix<double, -1, 1>(D);
      stan::math::fill(lambda, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      lambda = in__.vector(D);
      Eigen::Matrix<double, -1, 1> beta_l;
      beta_l = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(beta_l, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      beta_l = in__.vector(K);
      Eigen::Matrix<double, -1, -1> alpha;
      alpha = Eigen::Matrix<double, -1, -1>(D, J);
      stan::math::fill(alpha, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> beta;
      beta = Eigen::Matrix<double, -1, -1>(K, 1);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> delta_trans;
      delta_trans = std::vector<Eigen::Matrix<double, -1, 1>>(J, Eigen::Matrix<double, -1, 1>(delta_trans_2dim__));
      stan::math::fill(delta_trans, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(theta_resid,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "theta_resid"));}}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(theta_g[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nDelta; ++sym1__) {
        vars__.emplace_back(delta_l[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nDelta_r; ++sym1__) {
        vars__.emplace_back(delta_r_l[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        vars__.emplace_back(alpha_l[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nAlpha_r; ++sym1__) {
        vars__.emplace_back(alpha_r_l[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        vars__.emplace_back(lambda[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(beta_l[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      {
        current_statement__ = 16;
        for (int d = 1; d <= D; ++d) {
          current_statement__ = 14;
          for (int j = 1; j <= J; ++j) {
            current_statement__ = 12;
            assign(alpha,
              cons_list(index_uni(d),
                cons_list(index_uni(j), nil_index_list())), 0,
              "assigning variable alpha");}}
      }
      {
        int aindex;
        aindex = std::numeric_limits<int>::min();
        
        current_statement__ = 18;
        aindex = 0;
        int a_lower;
        a_lower = std::numeric_limits<int>::min();
        
        current_statement__ = 19;
        a_lower = 0;
        int a_upper;
        a_upper = std::numeric_limits<int>::min();
        
        current_statement__ = 20;
        a_upper = 0;
        current_statement__ = 28;
        for (int d = 1; d <= D; ++d) {
          current_statement__ = 21;
          a_lower = alpha_dstart[(d - 1)];
          current_statement__ = 22;
          a_upper = alpha_dend[(d - 1)];
          current_statement__ = 26;
          for (int i = a_lower; i <= a_upper; ++i) {
            current_statement__ = 23;
            aindex = (aindex + 1);
            current_statement__ = 24;
            assign(alpha,
              cons_list(index_uni(d),
                cons_list(index_uni(i), nil_index_list())),
              alpha_l[(aindex - 1)], "assigning variable alpha");}}
      }
      {
        current_statement__ = 32;
        for (int i = 1; i <= K; ++i) {
          current_statement__ = 30;
          assign(beta,
            cons_list(index_uni(i),
              cons_list(index_uni(1), nil_index_list())), 0,
            "assigning variable beta");}
      }
      {
        int bindex;
        bindex = std::numeric_limits<int>::min();
        
        current_statement__ = 34;
        bindex = 0;
        int b_lower;
        b_lower = std::numeric_limits<int>::min();
        
        current_statement__ = 35;
        b_lower = 0;
        int b_upper;
        b_upper = std::numeric_limits<int>::min();
        
        current_statement__ = 36;
        b_upper = 0;
        current_statement__ = 37;
        b_lower = beta_dstart;
        current_statement__ = 38;
        b_upper = beta_dend;
        current_statement__ = 42;
        for (int i = b_lower; i <= b_upper; ++i) {
          current_statement__ = 39;
          bindex = (bindex + 1);
          current_statement__ = 40;
          assign(beta,
            cons_list(index_uni(i),
              cons_list(index_uni(1), nil_index_list())),
            beta_l[(bindex - 1)], "assigning variable beta");}
      }
      {
        int idx;
        idx = std::numeric_limits<int>::min();
        
        current_statement__ = 44;
        idx = 0;
        int d_index;
        d_index = std::numeric_limits<int>::min();
        
        current_statement__ = 45;
        d_index = 0;
        current_statement__ = 57;
        for (int j = 1; j <= J; ++j) {
          current_statement__ = 46;
          validate_non_negative_index("ds_ind", "Ncategi[j] - 1",
                                      (Ncategi[(j - 1)] - 1));
          Eigen::Matrix<double, -1, 1> ds_ind;
          ds_ind = Eigen::Matrix<double, -1, 1>((Ncategi[(j - 1)] - 1));
          stan::math::fill(ds_ind, std::numeric_limits<double>::quiet_NaN());
          
          current_statement__ = 47;
          assign(ds_ind, nil_index_list(),
            sort_asc(
              rvalue(delta_l,
                cons_list(
                  index_min_max((d_index + 1), ((d_index + Ncategi[(j - 1)])
                                                 - 1)), nil_index_list()),
                "delta_l")), "assigning variable ds_ind");
          current_statement__ = 51;
          for (int i = 1; i <= (Ncategi[(j - 1)] - 1); ++i) {
            current_statement__ = 48;
            d_index = (d_index + 1);
            current_statement__ = 49;
            assign(delta_trans,
              cons_list(index_uni(j),
                cons_list(index_uni(i), nil_index_list())), ds_ind[(i - 1)],
              "assigning variable delta_trans");}
          current_statement__ = 55;
          for (int i = Ncategi[(j - 1)]; i <= (Ncateg_max - 1); ++i) {
            current_statement__ = 52;
            assign(delta_trans,
              cons_list(index_uni(j),
                cons_list(index_uni(i), nil_index_list())), (1e7 + idx),
              "assigning variable delta_trans");
            current_statement__ = 53;
            idx = (idx + 1);}}
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= D; ++sym2__) {
            vars__.emplace_back(
              rvalue(alpha,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "alpha"));
          }}
        for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            vars__.emplace_back(
              rvalue(beta,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "beta"));}
        }
        for (int sym1__ = 1; sym1__ <= delta_trans_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
            vars__.emplace_back(delta_trans[(sym2__ - 1)][(sym1__ - 1)]);}}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, -1> theta_resid;
      theta_resid = Eigen::Matrix<double, -1, -1>(N, D);
      stan::math::fill(theta_resid, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> theta_resid_flat__;
        current_statement__ = 1;
        assign(theta_resid_flat__, nil_index_list(),
          context__.vals_r("theta_resid"),
          "assigning variable theta_resid_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 1;
            assign(theta_resid,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              theta_resid_flat__[(pos__ - 1)],
              "assigning variable theta_resid");
            current_statement__ = 1;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> theta_g;
      theta_g = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(theta_g, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> theta_g_flat__;
        current_statement__ = 2;
        assign(theta_g_flat__, nil_index_list(), context__.vals_r("theta_g"),
          "assigning variable theta_g_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 2;
          assign(theta_g, cons_list(index_uni(sym1__), nil_index_list()),
            theta_g_flat__[(pos__ - 1)], "assigning variable theta_g");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> delta_l;
      delta_l = Eigen::Matrix<double, -1, 1>(nDelta);
      stan::math::fill(delta_l, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> delta_l_flat__;
        current_statement__ = 3;
        assign(delta_l_flat__, nil_index_list(), context__.vals_r("delta_l"),
          "assigning variable delta_l_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= nDelta; ++sym1__) {
          current_statement__ = 3;
          assign(delta_l, cons_list(index_uni(sym1__), nil_index_list()),
            delta_l_flat__[(pos__ - 1)], "assigning variable delta_l");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> delta_r_l;
      delta_r_l = Eigen::Matrix<double, -1, 1>(nDelta_r);
      stan::math::fill(delta_r_l, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> delta_r_l_flat__;
        current_statement__ = 4;
        assign(delta_r_l_flat__, nil_index_list(),
          context__.vals_r("delta_r_l"),
          "assigning variable delta_r_l_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= nDelta_r; ++sym1__) {
          current_statement__ = 4;
          assign(delta_r_l, cons_list(index_uni(sym1__), nil_index_list()),
            delta_r_l_flat__[(pos__ - 1)], "assigning variable delta_r_l");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> alpha_l;
      alpha_l = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(alpha_l, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> alpha_l_flat__;
        current_statement__ = 5;
        assign(alpha_l_flat__, nil_index_list(), context__.vals_r("alpha_l"),
          "assigning variable alpha_l_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 5;
          assign(alpha_l, cons_list(index_uni(sym1__), nil_index_list()),
            alpha_l_flat__[(pos__ - 1)], "assigning variable alpha_l");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> alpha_l_free__;
      alpha_l_free__ = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(alpha_l_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 5;
        assign(alpha_l_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(alpha_l[(sym1__ - 1)], 0),
          "assigning variable alpha_l_free__");}
      Eigen::Matrix<double, -1, 1> alpha_r_l;
      alpha_r_l = Eigen::Matrix<double, -1, 1>(nAlpha_r);
      stan::math::fill(alpha_r_l, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> alpha_r_l_flat__;
        current_statement__ = 6;
        assign(alpha_r_l_flat__, nil_index_list(),
          context__.vals_r("alpha_r_l"),
          "assigning variable alpha_r_l_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= nAlpha_r; ++sym1__) {
          current_statement__ = 6;
          assign(alpha_r_l, cons_list(index_uni(sym1__), nil_index_list()),
            alpha_r_l_flat__[(pos__ - 1)], "assigning variable alpha_r_l");
          current_statement__ = 6;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> lambda;
      lambda = Eigen::Matrix<double, -1, 1>(D);
      stan::math::fill(lambda, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> lambda_flat__;
        current_statement__ = 7;
        assign(lambda_flat__, nil_index_list(), context__.vals_r("lambda"),
          "assigning variable lambda_flat__");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 7;
          assign(lambda, cons_list(index_uni(sym1__), nil_index_list()),
            lambda_flat__[(pos__ - 1)], "assigning variable lambda");
          current_statement__ = 7;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> beta_l;
      beta_l = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(beta_l, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_l_flat__;
        current_statement__ = 8;
        assign(beta_l_flat__, nil_index_list(), context__.vals_r("beta_l"),
          "assigning variable beta_l_flat__");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 8;
          assign(beta_l, cons_list(index_uni(sym1__), nil_index_list()),
            beta_l_flat__[(pos__ - 1)], "assigning variable beta_l");
          current_statement__ = 8;
          pos__ = (pos__ + 1);}
      }
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(theta_resid,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "theta_resid"));}}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(theta_g[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nDelta; ++sym1__) {
        vars__.emplace_back(delta_l[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nDelta_r; ++sym1__) {
        vars__.emplace_back(delta_r_l[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        vars__.emplace_back(alpha_l_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nAlpha_r; ++sym1__) {
        vars__.emplace_back(alpha_r_l[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        vars__.emplace_back(lambda[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(beta_l[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("theta_resid");
    names__.emplace_back("theta_g");
    names__.emplace_back("delta_l");
    names__.emplace_back("delta_r_l");
    names__.emplace_back("alpha_l");
    names__.emplace_back("alpha_r_l");
    names__.emplace_back("lambda");
    names__.emplace_back("beta_l");
    names__.emplace_back("alpha");
    names__.emplace_back("beta");
    names__.emplace_back("delta_trans");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(D)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nDelta)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nDelta_r)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(L)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nAlpha_r)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(D)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(D),
                                             static_cast<size_t>(J)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K),
                                             static_cast<size_t>(1)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J),
                                             static_cast<size_t>(delta_trans_2dim__)
                                             });
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "theta_resid" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta_g" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nDelta; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "delta_l" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nDelta_r; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "delta_r_l" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha_l" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nAlpha_r; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha_r_l" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_l" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= D; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= delta_trans_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "delta_trans" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "theta_resid" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta_g" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nDelta; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "delta_l" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nDelta_r; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "delta_r_l" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha_l" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nAlpha_r; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha_r_l" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_l" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= D; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= delta_trans_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "delta_trans" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"theta_resid\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << D << "},\"block\":\"parameters\"},{\"name\":\"theta_g\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"delta_l\",\"type\":{\"name\":\"vector\",\"length\":" << nDelta << "},\"block\":\"parameters\"},{\"name\":\"delta_r_l\",\"type\":{\"name\":\"vector\",\"length\":" << nDelta_r << "},\"block\":\"parameters\"},{\"name\":\"alpha_l\",\"type\":{\"name\":\"vector\",\"length\":" << L << "},\"block\":\"parameters\"},{\"name\":\"alpha_r_l\",\"type\":{\"name\":\"vector\",\"length\":" << nAlpha_r << "},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" << D << "},\"block\":\"parameters\"},{\"name\":\"beta_l\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"matrix\",\"rows\":" << D << ",\"cols\":" << J << "},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"matrix\",\"rows\":" << K << ",\"cols\":" << 1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"delta_trans\",\"type\":{\"name\":\"array\",\"length\":" << J << ",\"element_type\":{\"name\":\"vector\",\"length\":" << delta_trans_2dim__ << "}},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"theta_resid\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << D << "},\"block\":\"parameters\"},{\"name\":\"theta_g\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"delta_l\",\"type\":{\"name\":\"vector\",\"length\":" << nDelta << "},\"block\":\"parameters\"},{\"name\":\"delta_r_l\",\"type\":{\"name\":\"vector\",\"length\":" << nDelta_r << "},\"block\":\"parameters\"},{\"name\":\"alpha_l\",\"type\":{\"name\":\"vector\",\"length\":" << L << "},\"block\":\"parameters\"},{\"name\":\"alpha_r_l\",\"type\":{\"name\":\"vector\",\"length\":" << nAlpha_r << "},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" << D << "},\"block\":\"parameters\"},{\"name\":\"beta_l\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"matrix\",\"rows\":" << D << ",\"cols\":" << J << "},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"matrix\",\"rows\":" << K << ",\"cols\":" << 1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"delta_trans\",\"type\":{\"name\":\"array\",\"length\":" << J << ",\"element_type\":{\"name\":\"vector\",\"length\":" << delta_trans_2dim__ << "}},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_inirt_hoirt_namespace::model_inirt_hoirt;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_inirt_hoirt_namespace::profiles__;
}
#endif
#endif
