// Generated by rstantools.  Do not edit by hand.

/*
    inirt is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    inirt is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with inirt.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-1-g67504470
#include <stan/model/model_header.hpp>
namespace model_inirt_unidim_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'inirt_unidim', line 86, column 2 to column 21)",
                                                      " (in 'inirt_unidim', line 87, column 2 to column 25)",
                                                      " (in 'inirt_unidim', line 88, column 2 to column 29)",
                                                      " (in 'inirt_unidim', line 89, column 2 to column 29)",
                                                      " (in 'inirt_unidim', line 90, column 2 to column 29)",
                                                      " (in 'inirt_unidim', line 91, column 2 to column 19)",
                                                      " (in 'inirt_unidim', line 92, column 2 to column 23)",
                                                      " (in 'inirt_unidim', line 93, column 2 to column 38)",
                                                      " (in 'inirt_unidim', line 94, column 2 to column 23)",
                                                      " (in 'inirt_unidim', line 95, column 2 to column 38)",
                                                      " (in 'inirt_unidim', line 96, column 2 to column 23)",
                                                      " (in 'inirt_unidim', line 97, column 2 to column 38)",
                                                      " (in 'inirt_unidim', line 98, column 2 to column 33)",
                                                      " (in 'inirt_unidim', line 99, column 2 to column 35)",
                                                      " (in 'inirt_unidim', line 100, column 2 to column 35)",
                                                      " (in 'inirt_unidim', line 101, column 2 to column 37)",
                                                      " (in 'inirt_unidim', line 102, column 2 to column 35)",
                                                      " (in 'inirt_unidim', line 103, column 2 to column 37)",
                                                      " (in 'inirt_unidim', line 104, column 2 to column 42)",
                                                      " (in 'inirt_unidim', line 105, column 2 to column 42)",
                                                      " (in 'inirt_unidim', line 106, column 2 to column 42)",
                                                      " (in 'inirt_unidim', line 109, column 2 to column 21)",
                                                      " (in 'inirt_unidim', line 110, column 2 to column 20)",
                                                      " (in 'inirt_unidim', line 111, column 2 to column 24)",
                                                      " (in 'inirt_unidim', line 112, column 2 to column 38)",
                                                      " (in 'inirt_unidim', line 114, column 4 to column 18)",
                                                      " (in 'inirt_unidim', line 117, column 8 to column 26)",
                                                      " (in 'inirt_unidim', line 118, column 8 to column 37)",
                                                      " (in 'inirt_unidim', line 116, column 20 to line 119, column 7)",
                                                      " (in 'inirt_unidim', line 116, column 6 to line 119, column 7)",
                                                      " (in 'inirt_unidim', line 115, column 18 to line 120, column 5)",
                                                      " (in 'inirt_unidim', line 115, column 4 to line 120, column 5)",
                                                      " (in 'inirt_unidim', line 113, column 2 to line 121, column 3)",
                                                      " (in 'inirt_unidim', line 125, column 6 to column 21)",
                                                      " (in 'inirt_unidim', line 126, column 6 to column 22)",
                                                      " (in 'inirt_unidim', line 127, column 6 to column 22)",
                                                      " (in 'inirt_unidim', line 129, column 8 to column 33)",
                                                      " (in 'inirt_unidim', line 130, column 8 to column 31)",
                                                      " (in 'inirt_unidim', line 132, column 10 to column 30)",
                                                      " (in 'inirt_unidim', line 133, column 10 to column 38)",
                                                      " (in 'inirt_unidim', line 131, column 34 to line 134, column 9)",
                                                      " (in 'inirt_unidim', line 131, column 8 to line 134, column 9)",
                                                      " (in 'inirt_unidim', line 128, column 20 to line 135, column 7)",
                                                      " (in 'inirt_unidim', line 128, column 6 to line 135, column 7)",
                                                      " (in 'inirt_unidim', line 124, column 17 to line 136, column 5)",
                                                      " (in 'inirt_unidim', line 124, column 4 to line 136, column 5)",
                                                      " (in 'inirt_unidim', line 123, column 2 to line 137, column 3)",
                                                      " (in 'inirt_unidim', line 140, column 6 to column 21)",
                                                      " (in 'inirt_unidim', line 141, column 6 to column 22)",
                                                      " (in 'inirt_unidim', line 142, column 6 to column 22)",
                                                      " (in 'inirt_unidim', line 144, column 8 to column 33)",
                                                      " (in 'inirt_unidim', line 145, column 8 to column 31)",
                                                      " (in 'inirt_unidim', line 147, column 10 to column 30)",
                                                      " (in 'inirt_unidim', line 148, column 10 to column 64)",
                                                      " (in 'inirt_unidim', line 146, column 34 to line 149, column 9)",
                                                      " (in 'inirt_unidim', line 146, column 8 to line 149, column 9)",
                                                      " (in 'inirt_unidim', line 143, column 20 to line 150, column 7)",
                                                      " (in 'inirt_unidim', line 143, column 6 to line 150, column 7)",
                                                      " (in 'inirt_unidim', line 139, column 21 to line 151, column 5)",
                                                      " (in 'inirt_unidim', line 139, column 4 to line 151, column 5)",
                                                      " (in 'inirt_unidim', line 138, column 2 to line 152, column 3)",
                                                      " (in 'inirt_unidim', line 154, column 4 to column 16)",
                                                      " (in 'inirt_unidim', line 155, column 4 to column 20)",
                                                      " (in 'inirt_unidim', line 157, column 13 to column 25)",
                                                      " (in 'inirt_unidim', line 157, column 6 to column 90)",
                                                      " (in 'inirt_unidim', line 159, column 8 to column 30)",
                                                      " (in 'inirt_unidim', line 160, column 8 to column 38)",
                                                      " (in 'inirt_unidim', line 158, column 33 to line 161, column 7)",
                                                      " (in 'inirt_unidim', line 158, column 6 to line 161, column 7)",
                                                      " (in 'inirt_unidim', line 163, column 8 to column 38)",
                                                      " (in 'inirt_unidim', line 164, column 8 to column 22)",
                                                      " (in 'inirt_unidim', line 162, column 44 to line 165, column 7)",
                                                      " (in 'inirt_unidim', line 162, column 6 to line 165, column 7)",
                                                      " (in 'inirt_unidim', line 156, column 18 to line 166, column 5)",
                                                      " (in 'inirt_unidim', line 156, column 4 to line 166, column 5)",
                                                      " (in 'inirt_unidim', line 153, column 2 to line 167, column 3)",
                                                      " (in 'inirt_unidim', line 170, column 2 to column 34)",
                                                      " (in 'inirt_unidim', line 172, column 2 to column 25)",
                                                      " (in 'inirt_unidim', line 173, column 2 to column 27)",
                                                      " (in 'inirt_unidim', line 174, column 2 to column 25)",
                                                      " (in 'inirt_unidim', line 175, column 2 to column 27)",
                                                      " (in 'inirt_unidim', line 177, column 4 to column 26)",
                                                      " (in 'inirt_unidim', line 176, column 15 to line 178, column 3)",
                                                      " (in 'inirt_unidim', line 176, column 2 to line 178, column 3)",
                                                      " (in 'inirt_unidim', line 180, column 4 to column 27)",
                                                      " (in 'inirt_unidim', line 181, column 4 to column 29)",
                                                      " (in 'inirt_unidim', line 179, column 19 to line 182, column 3)",
                                                      " (in 'inirt_unidim', line 179, column 2 to line 182, column 3)",
                                                      " (in 'inirt_unidim', line 184, column 4 to column 25)",
                                                      " (in 'inirt_unidim', line 185, column 4 to column 24)",
                                                      " (in 'inirt_unidim', line 187, column 6 to column 76)",
                                                      " (in 'inirt_unidim', line 186, column 28 to line 188, column 5)",
                                                      " (in 'inirt_unidim', line 186, column 4 to line 188, column 5)",
                                                      " (in 'inirt_unidim', line 183, column 19 to line 189, column 3)",
                                                      " (in 'inirt_unidim', line 183, column 2 to line 189, column 3)",
                                                      " (in 'inirt_unidim', line 191, column 4 to column 27)",
                                                      " (in 'inirt_unidim', line 192, column 4 to column 29)",
                                                      " (in 'inirt_unidim', line 190, column 21 to line 193, column 3)",
                                                      " (in 'inirt_unidim', line 190, column 2 to line 193, column 3)",
                                                      " (in 'inirt_unidim', line 195, column 4 to column 27)",
                                                      " (in 'inirt_unidim', line 196, column 4 to column 26)",
                                                      " (in 'inirt_unidim', line 198, column 6 to column 80)",
                                                      " (in 'inirt_unidim', line 197, column 28 to line 199, column 5)",
                                                      " (in 'inirt_unidim', line 197, column 4 to line 199, column 5)",
                                                      " (in 'inirt_unidim', line 194, column 21 to line 200, column 3)",
                                                      " (in 'inirt_unidim', line 194, column 2 to line 200, column 3)",
                                                      " (in 'inirt_unidim', line 202, column 4 to column 27)",
                                                      " (in 'inirt_unidim', line 203, column 4 to column 29)",
                                                      " (in 'inirt_unidim', line 201, column 21 to line 204, column 3)",
                                                      " (in 'inirt_unidim', line 201, column 2 to line 204, column 3)",
                                                      " (in 'inirt_unidim', line 206, column 4 to column 27)",
                                                      " (in 'inirt_unidim', line 207, column 4 to column 26)",
                                                      " (in 'inirt_unidim', line 209, column 6 to column 80)",
                                                      " (in 'inirt_unidim', line 208, column 28 to line 210, column 5)",
                                                      " (in 'inirt_unidim', line 208, column 4 to line 210, column 5)",
                                                      " (in 'inirt_unidim', line 205, column 21 to line 211, column 3)",
                                                      " (in 'inirt_unidim', line 205, column 2 to line 211, column 3)",
                                                      " (in 'inirt_unidim', line 214, column 11 to column 17)",
                                                      " (in 'inirt_unidim', line 214, column 4 to column 22)",
                                                      " (in 'inirt_unidim', line 216, column 6 to column 20)",
                                                      " (in 'inirt_unidim', line 217, column 6 to column 44)",
                                                      " (in 'inirt_unidim', line 218, column 6 to column 44)",
                                                      " (in 'inirt_unidim', line 221, column 10 to column 40)",
                                                      " (in 'inirt_unidim', line 220, column 30 to line 222, column 9)",
                                                      " (in 'inirt_unidim', line 220, column 8 to line 222, column 9)",
                                                      " (in 'inirt_unidim', line 219, column 20 to line 223, column 7)",
                                                      " (in 'inirt_unidim', line 219, column 6 to line 223, column 7)",
                                                      " (in 'inirt_unidim', line 227, column 10 to column 82)",
                                                      " (in 'inirt_unidim', line 226, column 30 to line 228, column 9)",
                                                      " (in 'inirt_unidim', line 226, column 8 to line 228, column 9)",
                                                      " (in 'inirt_unidim', line 225, column 23 to line 229, column 7)",
                                                      " (in 'inirt_unidim', line 225, column 6 to line 229, column 7)",
                                                      " (in 'inirt_unidim', line 232, column 10 to column 40)",
                                                      " (in 'inirt_unidim', line 231, column 26 to line 233, column 9)",
                                                      " (in 'inirt_unidim', line 231, column 8 to line 233, column 9)",
                                                      " (in 'inirt_unidim', line 230, column 23 to line 234, column 7)",
                                                      " (in 'inirt_unidim', line 230, column 6 to line 234, column 7)",
                                                      " (in 'inirt_unidim', line 238, column 10 to column 76)",
                                                      " (in 'inirt_unidim', line 237, column 26 to line 239, column 9)",
                                                      " (in 'inirt_unidim', line 237, column 8 to line 239, column 9)",
                                                      " (in 'inirt_unidim', line 236, column 25 to line 240, column 7)",
                                                      " (in 'inirt_unidim', line 236, column 6 to line 240, column 7)",
                                                      " (in 'inirt_unidim', line 243, column 10 to column 82)",
                                                      " (in 'inirt_unidim', line 242, column 30 to line 244, column 9)",
                                                      " (in 'inirt_unidim', line 242, column 8 to line 244, column 9)",
                                                      " (in 'inirt_unidim', line 241, column 25 to line 245, column 7)",
                                                      " (in 'inirt_unidim', line 241, column 6 to line 245, column 7)",
                                                      " (in 'inirt_unidim', line 248, column 10 to column 76)",
                                                      " (in 'inirt_unidim', line 247, column 26 to line 249, column 9)",
                                                      " (in 'inirt_unidim', line 247, column 8 to line 249, column 9)",
                                                      " (in 'inirt_unidim', line 246, column 25 to line 250, column 7)",
                                                      " (in 'inirt_unidim', line 246, column 6 to line 250, column 7)",
                                                      " (in 'inirt_unidim', line 253, column 10 to column 82)",
                                                      " (in 'inirt_unidim', line 252, column 30 to line 254, column 9)",
                                                      " (in 'inirt_unidim', line 252, column 8 to line 254, column 9)",
                                                      " (in 'inirt_unidim', line 251, column 25 to line 255, column 7)",
                                                      " (in 'inirt_unidim', line 251, column 6 to line 255, column 7)",
                                                      " (in 'inirt_unidim', line 256, column 6 to column 61)",
                                                      " (in 'inirt_unidim', line 257, column 6 to column 90)",
                                                      " (in 'inirt_unidim', line 215, column 24 to line 258, column 5)",
                                                      " (in 'inirt_unidim', line 215, column 4 to line 258, column 5)",
                                                      " (in 'inirt_unidim', line 213, column 2 to line 259, column 3)",
                                                      " (in 'inirt_unidim', line 8, column 2 to column 17)",
                                                      " (in 'inirt_unidim', line 9, column 2 to column 17)",
                                                      " (in 'inirt_unidim', line 10, column 2 to column 17)",
                                                      " (in 'inirt_unidim', line 11, column 2 to column 32)",
                                                      " (in 'inirt_unidim', line 12, column 2 to column 36)",
                                                      " (in 'inirt_unidim', line 13, column 2 to column 36)",
                                                      " (in 'inirt_unidim', line 14, column 2 to column 38)",
                                                      " (in 'inirt_unidim', line 15, column 2 to column 38)",
                                                      " (in 'inirt_unidim', line 16, column 2 to column 38)",
                                                      " (in 'inirt_unidim', line 17, column 2 to column 38)",
                                                      " (in 'inirt_unidim', line 18, column 2 to column 26)",
                                                      " (in 'inirt_unidim', line 19, column 40 to column 41)",
                                                      " (in 'inirt_unidim', line 19, column 2 to column 43)",
                                                      " (in 'inirt_unidim', line 20, column 2 to column 22)",
                                                      " (in 'inirt_unidim', line 21, column 26 to column 32)",
                                                      " (in 'inirt_unidim', line 21, column 2 to column 34)",
                                                      " (in 'inirt_unidim', line 22, column 26 to column 32)",
                                                      " (in 'inirt_unidim', line 22, column 2 to column 34)",
                                                      " (in 'inirt_unidim', line 23, column 34 to column 40)",
                                                      " (in 'inirt_unidim', line 23, column 2 to column 42)",
                                                      " (in 'inirt_unidim', line 24, column 9 to column 10)",
                                                      " (in 'inirt_unidim', line 24, column 12 to column 13)",
                                                      " (in 'inirt_unidim', line 24, column 2 to column 17)",
                                                      " (in 'inirt_unidim', line 25, column 2 to column 17)",
                                                      " (in 'inirt_unidim', line 26, column 2 to column 22)",
                                                      " (in 'inirt_unidim', line 27, column 2 to column 17)",
                                                      " (in 'inirt_unidim', line 28, column 2 to column 32)",
                                                      " (in 'inirt_unidim', line 29, column 27 to column 43)",
                                                      " (in 'inirt_unidim', line 29, column 2 to column 45)",
                                                      " (in 'inirt_unidim', line 30, column 25 to column 41)",
                                                      " (in 'inirt_unidim', line 30, column 2 to column 43)",
                                                      " (in 'inirt_unidim', line 31, column 27 to column 47)",
                                                      " (in 'inirt_unidim', line 31, column 2 to column 49)",
                                                      " (in 'inirt_unidim', line 32, column 25 to column 45)",
                                                      " (in 'inirt_unidim', line 32, column 2 to column 47)",
                                                      " (in 'inirt_unidim', line 33, column 15 to column 21)",
                                                      " (in 'inirt_unidim', line 33, column 2 to column 23)",
                                                      " (in 'inirt_unidim', line 34, column 9 to column 15)",
                                                      " (in 'inirt_unidim', line 34, column 17 to column 18)",
                                                      " (in 'inirt_unidim', line 34, column 2 to column 27)",
                                                      " (in 'inirt_unidim', line 37, column 2 to column 24)",
                                                      " (in 'inirt_unidim', line 38, column 2 to column 24)",
                                                      " (in 'inirt_unidim', line 39, column 9 to column 10)",
                                                      " (in 'inirt_unidim', line 39, column 12 to column 20)",
                                                      " (in 'inirt_unidim', line 39, column 2 to column 31)",
                                                      " (in 'inirt_unidim', line 40, column 9 to column 10)",
                                                      " (in 'inirt_unidim', line 40, column 12 to column 20)",
                                                      " (in 'inirt_unidim', line 40, column 2 to column 31)",
                                                      " (in 'inirt_unidim', line 42, column 2 to column 21)",
                                                      " (in 'inirt_unidim', line 43, column 2 to column 21)",
                                                      " (in 'inirt_unidim', line 44, column 2 to column 21)",
                                                      " (in 'inirt_unidim', line 46, column 2 to column 27)",
                                                      " (in 'inirt_unidim', line 47, column 2 to column 27)",
                                                      " (in 'inirt_unidim', line 48, column 2 to column 27)",
                                                      " (in 'inirt_unidim', line 49, column 2 to column 27)",
                                                      " (in 'inirt_unidim', line 50, column 2 to column 27)",
                                                      " (in 'inirt_unidim', line 51, column 2 to column 27)",
                                                      " (in 'inirt_unidim', line 53, column 2 to column 25)",
                                                      " (in 'inirt_unidim', line 54, column 2 to column 25)",
                                                      " (in 'inirt_unidim', line 55, column 2 to column 25)",
                                                      " (in 'inirt_unidim', line 56, column 9 to column 10)",
                                                      " (in 'inirt_unidim', line 56, column 12 to column 17)",
                                                      " (in 'inirt_unidim', line 56, column 2 to column 21)",
                                                      " (in 'inirt_unidim', line 57, column 9 to column 10)",
                                                      " (in 'inirt_unidim', line 57, column 12 to column 17)",
                                                      " (in 'inirt_unidim', line 57, column 2 to column 22)",
                                                      " (in 'inirt_unidim', line 58, column 9 to column 10)",
                                                      " (in 'inirt_unidim', line 58, column 12 to column 17)",
                                                      " (in 'inirt_unidim', line 58, column 2 to column 22)",
                                                      " (in 'inirt_unidim', line 59, column 2 to column 24)",
                                                      " (in 'inirt_unidim', line 60, column 27 to column 32)",
                                                      " (in 'inirt_unidim', line 60, column 2 to column 34)",
                                                      " (in 'inirt_unidim', line 61, column 30 to column 39)",
                                                      " (in 'inirt_unidim', line 61, column 2 to column 41)",
                                                      " (in 'inirt_unidim', line 62, column 35 to column 44)",
                                                      " (in 'inirt_unidim', line 62, column 2 to column 46)",
                                                      " (in 'inirt_unidim', line 63, column 2 to column 24)",
                                                      " (in 'inirt_unidim', line 64, column 23 to column 28)",
                                                      " (in 'inirt_unidim', line 64, column 2 to column 30)",
                                                      " (in 'inirt_unidim', line 65, column 27 to column 32)",
                                                      " (in 'inirt_unidim', line 65, column 2 to column 34)",
                                                      " (in 'inirt_unidim', line 66, column 30 to column 39)",
                                                      " (in 'inirt_unidim', line 66, column 2 to column 41)",
                                                      " (in 'inirt_unidim', line 67, column 35 to column 44)",
                                                      " (in 'inirt_unidim', line 67, column 2 to column 46)",
                                                      " (in 'inirt_unidim', line 68, column 2 to column 24)",
                                                      " (in 'inirt_unidim', line 69, column 23 to column 28)",
                                                      " (in 'inirt_unidim', line 69, column 2 to column 30)",
                                                      " (in 'inirt_unidim', line 70, column 27 to column 32)",
                                                      " (in 'inirt_unidim', line 70, column 2 to column 34)",
                                                      " (in 'inirt_unidim', line 71, column 30 to column 39)",
                                                      " (in 'inirt_unidim', line 71, column 2 to column 41)",
                                                      " (in 'inirt_unidim', line 72, column 35 to column 44)",
                                                      " (in 'inirt_unidim', line 72, column 2 to column 46)",
                                                      " (in 'inirt_unidim', line 73, column 9 to column 10)",
                                                      " (in 'inirt_unidim', line 73, column 12 to column 21)",
                                                      " (in 'inirt_unidim', line 73, column 2 to column 27)",
                                                      " (in 'inirt_unidim', line 74, column 9 to column 10)",
                                                      " (in 'inirt_unidim', line 74, column 12 to column 21)",
                                                      " (in 'inirt_unidim', line 74, column 2 to column 27)",
                                                      " (in 'inirt_unidim', line 75, column 9 to column 10)",
                                                      " (in 'inirt_unidim', line 75, column 12 to column 21)",
                                                      " (in 'inirt_unidim', line 75, column 2 to column 27)",
                                                      " (in 'inirt_unidim', line 78, column 9 to column 20)",
                                                      " (in 'inirt_unidim', line 78, column 2 to column 38)",
                                                      " (in 'inirt_unidim', line 79, column 2 to column 47)",
                                                      " (in 'inirt_unidim', line 80, column 9 to column 20)",
                                                      " (in 'inirt_unidim', line 80, column 2 to column 38)",
                                                      " (in 'inirt_unidim', line 81, column 2 to column 47)",
                                                      " (in 'inirt_unidim', line 82, column 9 to column 20)",
                                                      " (in 'inirt_unidim', line 82, column 2 to column 38)",
                                                      " (in 'inirt_unidim', line 83, column 2 to column 47)",
                                                      " (in 'inirt_unidim', line 86, column 9 to column 10)",
                                                      " (in 'inirt_unidim', line 86, column 12 to column 13)",
                                                      " (in 'inirt_unidim', line 87, column 9 to column 15)",
                                                      " (in 'inirt_unidim', line 88, column 9 to column 17)",
                                                      " (in 'inirt_unidim', line 89, column 18 to column 19)",
                                                      " (in 'inirt_unidim', line 90, column 9 to column 17)",
                                                      " (in 'inirt_unidim', line 91, column 9 to column 10)",
                                                      " (in 'inirt_unidim', line 92, column 9 to column 14)",
                                                      " (in 'inirt_unidim', line 93, column 18 to column 26)",
                                                      " (in 'inirt_unidim', line 94, column 9 to column 14)",
                                                      " (in 'inirt_unidim', line 95, column 18 to column 26)",
                                                      " (in 'inirt_unidim', line 96, column 9 to column 14)",
                                                      " (in 'inirt_unidim', line 97, column 18 to column 26)",
                                                      " (in 'inirt_unidim', line 98, column 14 to column 25)",
                                                      " (in 'inirt_unidim', line 99, column 18 to column 29)",
                                                      " (in 'inirt_unidim', line 100, column 14 to column 25)",
                                                      " (in 'inirt_unidim', line 101, column 18 to column 29)",
                                                      " (in 'inirt_unidim', line 102, column 14 to column 25)",
                                                      " (in 'inirt_unidim', line 103, column 18 to column 29)",
                                                      " (in 'inirt_unidim', line 104, column 29 to column 40)",
                                                      " (in 'inirt_unidim', line 104, column 9 to column 20)",
                                                      " (in 'inirt_unidim', line 105, column 29 to column 40)",
                                                      " (in 'inirt_unidim', line 105, column 9 to column 20)",
                                                      " (in 'inirt_unidim', line 106, column 29 to column 40)",
                                                      " (in 'inirt_unidim', line 106, column 9 to column 20)",
                                                      " (in 'inirt_unidim', line 109, column 9 to column 10)",
                                                      " (in 'inirt_unidim', line 109, column 12 to column 13)",
                                                      " (in 'inirt_unidim', line 110, column 9 to column 10)",
                                                      " (in 'inirt_unidim', line 110, column 12 to column 13)",
                                                      " (in 'inirt_unidim', line 111, column 9 to column 14)",
                                                      " (in 'inirt_unidim', line 111, column 16 to column 17)",
                                                      " (in 'inirt_unidim', line 112, column 35 to column 36)",
                                                      " (in 'inirt_unidim', line 112, column 9 to column 21)"};
#include <stan_meta_header.hpp>
class model_inirt_unidim final : public model_base_crtp<model_inirt_unidim> {
private:
  int N;
  int J;
  int K;
  int any_rand;
  int any_rand_ind;
  int any_rand_cor;
  int any_rand_ind_a;
  int any_rand_cor_a;
  int any_rand_ind_d;
  int any_rand_cor_d;
  int Ncateg_max;
  std::vector<int> Ncategi;
  int N_long;
  std::vector<int> nn;
  std::vector<int> jj;
  std::vector<int> y;
  Eigen::Matrix<double, -1, -1> x;
  int D;
  int nDelta;
  int L;
  int has_treg;
  std::vector<int> beta_dstart;
  std::vector<int> beta_dend;
  std::vector<int> zeta_dstart;
  std::vector<int> zeta_dend;
  std::vector<double> weights;
  Eigen::Matrix<double, -1, -1> x_miss;
  int nDelta_r;
  int nAlpha_r;
  Eigen::Matrix<double, -1, -1> d_design;
  Eigen::Matrix<double, -1, -1> a_design;
  int Lzeta;
  int Laeta;
  int Ldeta;
  int u_Lzeta_cor;
  int l_Lzeta_cor;
  int u_Laeta_cor;
  int l_Laeta_cor;
  int u_Ldeta_cor;
  int l_Ldeta_cor;
  int Lzeta_cor;
  int Laeta_cor;
  int Ldeta_cor;
  Eigen::Matrix<double, -1, -1> z;
  Eigen::Matrix<double, -1, -1> ar;
  Eigen::Matrix<double, -1, -1> dr;
  int Lzeta_sd;
  std::vector<int> zeta_sd_ind;
  std::vector<int> cor_z_item_ind;
  std::vector<int> cor_z_item_elem_ind;
  int Laeta_sd;
  std::vector<int> alindex;
  std::vector<int> aeta_sd_ind;
  std::vector<int> cor_a_item_ind;
  std::vector<int> cor_a_item_elem_ind;
  int Ldeta_sd;
  std::vector<int> dlindex;
  std::vector<int> deta_sd_ind;
  std::vector<int> cor_d_item_ind;
  std::vector<int> cor_d_item_elem_ind;
  Eigen::Matrix<double, -1, -1> z_c;
  Eigen::Matrix<double, -1, -1> a_c;
  Eigen::Matrix<double, -1, -1> d_c;
  Eigen::Matrix<double, -1, 1> zeros_Lzeta_cor;
  Eigen::Matrix<double, -1, 1> zeros_Laeta_cor;
  Eigen::Matrix<double, -1, 1> zeros_Ldeta_cor;
  int delta_trans_2dim__;
 
public:
  ~model_inirt_unidim() { }
  
  inline std::string model_name() const final { return "model_inirt_unidim"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-1-g67504470", "stancflags = "};
  }
  
  
  model_inirt_unidim(stan::io::var_context& context__,
                     unsigned int random_seed__ = 0,
                     std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_inirt_unidim_namespace::model_inirt_unidim";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 163;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 163;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 163;
      current_statement__ = 163;
      check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 164;
      context__.validate_dims("data initialization","J","int",
          context__.to_vec());
      J = std::numeric_limits<int>::min();
      
      current_statement__ = 164;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 164;
      current_statement__ = 164;
      check_greater_or_equal(function__, "J", J, 1);
      current_statement__ = 165;
      context__.validate_dims("data initialization","K","int",
          context__.to_vec());
      K = std::numeric_limits<int>::min();
      
      current_statement__ = 165;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 165;
      current_statement__ = 165;
      check_greater_or_equal(function__, "K", K, 0);
      current_statement__ = 166;
      context__.validate_dims("data initialization","any_rand","int",
          context__.to_vec());
      any_rand = std::numeric_limits<int>::min();
      
      current_statement__ = 166;
      any_rand = context__.vals_i("any_rand")[(1 - 1)];
      current_statement__ = 166;
      current_statement__ = 166;
      check_greater_or_equal(function__, "any_rand", any_rand, 0);
      current_statement__ = 166;
      current_statement__ = 166;
      check_less_or_equal(function__, "any_rand", any_rand, 1);
      current_statement__ = 167;
      context__.validate_dims("data initialization","any_rand_ind","int",
          context__.to_vec());
      any_rand_ind = std::numeric_limits<int>::min();
      
      current_statement__ = 167;
      any_rand_ind = context__.vals_i("any_rand_ind")[(1 - 1)];
      current_statement__ = 167;
      current_statement__ = 167;
      check_greater_or_equal(function__, "any_rand_ind", any_rand_ind, 0);
      current_statement__ = 167;
      current_statement__ = 167;
      check_less_or_equal(function__, "any_rand_ind", any_rand_ind, 1);
      current_statement__ = 168;
      context__.validate_dims("data initialization","any_rand_cor","int",
          context__.to_vec());
      any_rand_cor = std::numeric_limits<int>::min();
      
      current_statement__ = 168;
      any_rand_cor = context__.vals_i("any_rand_cor")[(1 - 1)];
      current_statement__ = 168;
      current_statement__ = 168;
      check_greater_or_equal(function__, "any_rand_cor", any_rand_cor, 0);
      current_statement__ = 168;
      current_statement__ = 168;
      check_less_or_equal(function__, "any_rand_cor", any_rand_cor, 1);
      current_statement__ = 169;
      context__.validate_dims("data initialization","any_rand_ind_a","int",
          context__.to_vec());
      any_rand_ind_a = std::numeric_limits<int>::min();
      
      current_statement__ = 169;
      any_rand_ind_a = context__.vals_i("any_rand_ind_a")[(1 - 1)];
      current_statement__ = 169;
      current_statement__ = 169;
      check_greater_or_equal(function__, "any_rand_ind_a", any_rand_ind_a, 0);
      current_statement__ = 169;
      current_statement__ = 169;
      check_less_or_equal(function__, "any_rand_ind_a", any_rand_ind_a, 1);
      current_statement__ = 170;
      context__.validate_dims("data initialization","any_rand_cor_a","int",
          context__.to_vec());
      any_rand_cor_a = std::numeric_limits<int>::min();
      
      current_statement__ = 170;
      any_rand_cor_a = context__.vals_i("any_rand_cor_a")[(1 - 1)];
      current_statement__ = 170;
      current_statement__ = 170;
      check_greater_or_equal(function__, "any_rand_cor_a", any_rand_cor_a, 0);
      current_statement__ = 170;
      current_statement__ = 170;
      check_less_or_equal(function__, "any_rand_cor_a", any_rand_cor_a, 1);
      current_statement__ = 171;
      context__.validate_dims("data initialization","any_rand_ind_d","int",
          context__.to_vec());
      any_rand_ind_d = std::numeric_limits<int>::min();
      
      current_statement__ = 171;
      any_rand_ind_d = context__.vals_i("any_rand_ind_d")[(1 - 1)];
      current_statement__ = 171;
      current_statement__ = 171;
      check_greater_or_equal(function__, "any_rand_ind_d", any_rand_ind_d, 0);
      current_statement__ = 171;
      current_statement__ = 171;
      check_less_or_equal(function__, "any_rand_ind_d", any_rand_ind_d, 1);
      current_statement__ = 172;
      context__.validate_dims("data initialization","any_rand_cor_d","int",
          context__.to_vec());
      any_rand_cor_d = std::numeric_limits<int>::min();
      
      current_statement__ = 172;
      any_rand_cor_d = context__.vals_i("any_rand_cor_d")[(1 - 1)];
      current_statement__ = 172;
      current_statement__ = 172;
      check_greater_or_equal(function__, "any_rand_cor_d", any_rand_cor_d, 0);
      current_statement__ = 172;
      current_statement__ = 172;
      check_less_or_equal(function__, "any_rand_cor_d", any_rand_cor_d, 1);
      current_statement__ = 173;
      context__.validate_dims("data initialization","Ncateg_max","int",
          context__.to_vec());
      Ncateg_max = std::numeric_limits<int>::min();
      
      current_statement__ = 173;
      Ncateg_max = context__.vals_i("Ncateg_max")[(1 - 1)];
      current_statement__ = 173;
      current_statement__ = 173;
      check_greater_or_equal(function__, "Ncateg_max", Ncateg_max, 2);
      current_statement__ = 174;
      validate_non_negative_index("Ncategi", "J", J);
      current_statement__ = 175;
      context__.validate_dims("data initialization","Ncategi","int",
          context__.to_vec(J));
      Ncategi = std::vector<int>(J, std::numeric_limits<int>::min());
      
      current_statement__ = 175;
      assign(Ncategi, nil_index_list(), context__.vals_i("Ncategi"),
        "assigning variable Ncategi");
      current_statement__ = 175;
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 175;
        current_statement__ = 175;
        check_greater_or_equal(function__, "Ncategi[sym1__]",
                               Ncategi[(sym1__ - 1)], 2);}
      current_statement__ = 175;
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 175;
        current_statement__ = 175;
        check_less_or_equal(function__, "Ncategi[sym1__]",
                            Ncategi[(sym1__ - 1)], Ncateg_max);}
      current_statement__ = 176;
      context__.validate_dims("data initialization","N_long","int",
          context__.to_vec());
      N_long = std::numeric_limits<int>::min();
      
      current_statement__ = 176;
      N_long = context__.vals_i("N_long")[(1 - 1)];
      current_statement__ = 176;
      current_statement__ = 176;
      check_greater_or_equal(function__, "N_long", N_long, 1);
      current_statement__ = 177;
      validate_non_negative_index("nn", "N_long", N_long);
      current_statement__ = 178;
      context__.validate_dims("data initialization","nn","int",
          context__.to_vec(N_long));
      nn = std::vector<int>(N_long, std::numeric_limits<int>::min());
      
      current_statement__ = 178;
      assign(nn, nil_index_list(), context__.vals_i("nn"),
        "assigning variable nn");
      current_statement__ = 178;
      for (int sym1__ = 1; sym1__ <= N_long; ++sym1__) {
        current_statement__ = 178;
        current_statement__ = 178;
        check_greater_or_equal(function__, "nn[sym1__]", nn[(sym1__ - 1)], 1);
      }
      current_statement__ = 178;
      for (int sym1__ = 1; sym1__ <= N_long; ++sym1__) {
        current_statement__ = 178;
        current_statement__ = 178;
        check_less_or_equal(function__, "nn[sym1__]", nn[(sym1__ - 1)], N);}
      current_statement__ = 179;
      validate_non_negative_index("jj", "N_long", N_long);
      current_statement__ = 180;
      context__.validate_dims("data initialization","jj","int",
          context__.to_vec(N_long));
      jj = std::vector<int>(N_long, std::numeric_limits<int>::min());
      
      current_statement__ = 180;
      assign(jj, nil_index_list(), context__.vals_i("jj"),
        "assigning variable jj");
      current_statement__ = 180;
      for (int sym1__ = 1; sym1__ <= N_long; ++sym1__) {
        current_statement__ = 180;
        current_statement__ = 180;
        check_greater_or_equal(function__, "jj[sym1__]", jj[(sym1__ - 1)], 1);
      }
      current_statement__ = 180;
      for (int sym1__ = 1; sym1__ <= N_long; ++sym1__) {
        current_statement__ = 180;
        current_statement__ = 180;
        check_less_or_equal(function__, "jj[sym1__]", jj[(sym1__ - 1)], J);}
      current_statement__ = 181;
      validate_non_negative_index("y", "N_long", N_long);
      current_statement__ = 182;
      context__.validate_dims("data initialization","y","int",
          context__.to_vec(N_long));
      y = std::vector<int>(N_long, std::numeric_limits<int>::min());
      
      current_statement__ = 182;
      assign(y, nil_index_list(), context__.vals_i("y"),
        "assigning variable y");
      current_statement__ = 182;
      for (int sym1__ = 1; sym1__ <= N_long; ++sym1__) {
        current_statement__ = 182;
        current_statement__ = 182;
        check_greater_or_equal(function__, "y[sym1__]", y[(sym1__ - 1)], 0);}
      current_statement__ = 182;
      for (int sym1__ = 1; sym1__ <= N_long; ++sym1__) {
        current_statement__ = 182;
        current_statement__ = 182;
        check_less_or_equal(function__, "y[sym1__]", y[(sym1__ - 1)],
                            Ncateg_max);}
      current_statement__ = 183;
      validate_non_negative_index("x", "N", N);
      current_statement__ = 184;
      validate_non_negative_index("x", "K", K);
      current_statement__ = 185;
      context__.validate_dims("data initialization","x","double",
          context__.to_vec(N, K));
      x = Eigen::Matrix<double, -1, -1>(N, K);
      stan::math::fill(x, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 185;
        assign(x_flat__, nil_index_list(), context__.vals_r("x"),
          "assigning variable x_flat__");
        current_statement__ = 185;
        pos__ = 1;
        current_statement__ = 185;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 185;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 185;
            assign(x,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              x_flat__[(pos__ - 1)], "assigning variable x");
            current_statement__ = 185;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 186;
      context__.validate_dims("data initialization","D","int",
          context__.to_vec());
      D = std::numeric_limits<int>::min();
      
      current_statement__ = 186;
      D = context__.vals_i("D")[(1 - 1)];
      current_statement__ = 186;
      current_statement__ = 186;
      check_greater_or_equal(function__, "D", D, 1);
      current_statement__ = 187;
      context__.validate_dims("data initialization","nDelta","int",
          context__.to_vec());
      nDelta = std::numeric_limits<int>::min();
      
      current_statement__ = 187;
      nDelta = context__.vals_i("nDelta")[(1 - 1)];
      current_statement__ = 187;
      current_statement__ = 187;
      check_greater_or_equal(function__, "nDelta", nDelta, 1);
      current_statement__ = 188;
      context__.validate_dims("data initialization","L","int",
          context__.to_vec());
      L = std::numeric_limits<int>::min();
      
      current_statement__ = 188;
      L = context__.vals_i("L")[(1 - 1)];
      current_statement__ = 188;
      current_statement__ = 188;
      check_greater_or_equal(function__, "L", L, 1);
      current_statement__ = 189;
      context__.validate_dims("data initialization","has_treg","int",
          context__.to_vec());
      has_treg = std::numeric_limits<int>::min();
      
      current_statement__ = 189;
      has_treg = context__.vals_i("has_treg")[(1 - 1)];
      current_statement__ = 189;
      current_statement__ = 189;
      check_greater_or_equal(function__, "has_treg", has_treg, 0);
      current_statement__ = 189;
      current_statement__ = 189;
      check_less_or_equal(function__, "has_treg", has_treg, 1);
      current_statement__ = 190;
      validate_non_negative_index("beta_dstart", "has_treg ? D : 0",
                                  (has_treg ? D : 0));
      current_statement__ = 191;
      context__.validate_dims("data initialization","beta_dstart","int",
          context__.to_vec((has_treg ? D : 0)));
      beta_dstart = std::vector<int>((has_treg ? D : 0), std::numeric_limits<int>::min());
      
      current_statement__ = 191;
      assign(beta_dstart, nil_index_list(), context__.vals_i("beta_dstart"),
        "assigning variable beta_dstart");
      current_statement__ = 191;
      for (int sym1__ = 1; sym1__ <= (has_treg ? D : 0); ++sym1__) {
        current_statement__ = 191;
        current_statement__ = 191;
        check_greater_or_equal(function__, "beta_dstart[sym1__]",
                               beta_dstart[(sym1__ - 1)], 1);}
      current_statement__ = 192;
      validate_non_negative_index("beta_dend", "has_treg ? D : 0",
                                  (has_treg ? D : 0));
      current_statement__ = 193;
      context__.validate_dims("data initialization","beta_dend","int",
          context__.to_vec((has_treg ? D : 0)));
      beta_dend = std::vector<int>((has_treg ? D : 0), std::numeric_limits<int>::min());
      
      current_statement__ = 193;
      assign(beta_dend, nil_index_list(), context__.vals_i("beta_dend"),
        "assigning variable beta_dend");
      current_statement__ = 193;
      for (int sym1__ = 1; sym1__ <= (has_treg ? D : 0); ++sym1__) {
        current_statement__ = 193;
        current_statement__ = 193;
        check_greater_or_equal(function__, "beta_dend[sym1__]",
                               beta_dend[(sym1__ - 1)], 1);}
      current_statement__ = 194;
      validate_non_negative_index("zeta_dstart", "any_rand_ind ? D : 0",
                                  (any_rand_ind ? D : 0));
      current_statement__ = 195;
      context__.validate_dims("data initialization","zeta_dstart","int",
          context__.to_vec((any_rand_ind ? D : 0)));
      zeta_dstart = std::vector<int>((any_rand_ind ? D : 0), std::numeric_limits<int>::min());
      
      current_statement__ = 195;
      assign(zeta_dstart, nil_index_list(), context__.vals_i("zeta_dstart"),
        "assigning variable zeta_dstart");
      current_statement__ = 195;
      for (int sym1__ = 1; sym1__ <= (any_rand_ind ? D : 0); ++sym1__) {
        current_statement__ = 195;
        current_statement__ = 195;
        check_greater_or_equal(function__, "zeta_dstart[sym1__]",
                               zeta_dstart[(sym1__ - 1)], 1);}
      current_statement__ = 196;
      validate_non_negative_index("zeta_dend", "any_rand_ind ? D : 0",
                                  (any_rand_ind ? D : 0));
      current_statement__ = 197;
      context__.validate_dims("data initialization","zeta_dend","int",
          context__.to_vec((any_rand_ind ? D : 0)));
      zeta_dend = std::vector<int>((any_rand_ind ? D : 0), std::numeric_limits<int>::min());
      
      current_statement__ = 197;
      assign(zeta_dend, nil_index_list(), context__.vals_i("zeta_dend"),
        "assigning variable zeta_dend");
      current_statement__ = 197;
      for (int sym1__ = 1; sym1__ <= (any_rand_ind ? D : 0); ++sym1__) {
        current_statement__ = 197;
        current_statement__ = 197;
        check_greater_or_equal(function__, "zeta_dend[sym1__]",
                               zeta_dend[(sym1__ - 1)], 1);}
      current_statement__ = 198;
      validate_non_negative_index("weights", "N_long", N_long);
      current_statement__ = 199;
      context__.validate_dims("data initialization","weights","double",
          context__.to_vec(N_long));
      weights = std::vector<double>(N_long, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 199;
      assign(weights, nil_index_list(), context__.vals_r("weights"),
        "assigning variable weights");
      current_statement__ = 200;
      validate_non_negative_index("x_miss", "N_long", N_long);
      current_statement__ = 201;
      validate_non_negative_index("x_miss", "K", K);
      current_statement__ = 202;
      context__.validate_dims("data initialization","x_miss","double",
          context__.to_vec(N_long, K));
      x_miss = Eigen::Matrix<double, -1, -1>(N_long, K);
      stan::math::fill(x_miss, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x_miss_flat__;
        current_statement__ = 202;
        assign(x_miss_flat__, nil_index_list(), context__.vals_r("x_miss"),
          "assigning variable x_miss_flat__");
        current_statement__ = 202;
        pos__ = 1;
        current_statement__ = 202;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 202;
          for (int sym2__ = 1; sym2__ <= N_long; ++sym2__) {
            current_statement__ = 202;
            assign(x_miss,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              x_miss_flat__[(pos__ - 1)], "assigning variable x_miss");
            current_statement__ = 202;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 203;
      context__.validate_dims("data initialization","nDelta_r","int",
          context__.to_vec());
      nDelta_r = std::numeric_limits<int>::min();
      
      current_statement__ = 203;
      nDelta_r = context__.vals_i("nDelta_r")[(1 - 1)];
      current_statement__ = 203;
      current_statement__ = 203;
      check_greater_or_equal(function__, "nDelta_r", nDelta_r, 1);
      current_statement__ = 204;
      context__.validate_dims("data initialization","nAlpha_r","int",
          context__.to_vec());
      nAlpha_r = std::numeric_limits<int>::min();
      
      current_statement__ = 204;
      nAlpha_r = context__.vals_i("nAlpha_r")[(1 - 1)];
      current_statement__ = 204;
      current_statement__ = 204;
      check_greater_or_equal(function__, "nAlpha_r", nAlpha_r, 1);
      current_statement__ = 205;
      validate_non_negative_index("d_design", "N", N);
      current_statement__ = 206;
      validate_non_negative_index("d_design", "nDelta_r", nDelta_r);
      current_statement__ = 207;
      context__.validate_dims("data initialization","d_design","double",
          context__.to_vec(N, nDelta_r));
      d_design = Eigen::Matrix<double, -1, -1>(N, nDelta_r);
      stan::math::fill(d_design, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> d_design_flat__;
        current_statement__ = 207;
        assign(d_design_flat__, nil_index_list(),
          context__.vals_r("d_design"), "assigning variable d_design_flat__");
        current_statement__ = 207;
        pos__ = 1;
        current_statement__ = 207;
        for (int sym1__ = 1; sym1__ <= nDelta_r; ++sym1__) {
          current_statement__ = 207;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 207;
            assign(d_design,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              d_design_flat__[(pos__ - 1)], "assigning variable d_design");
            current_statement__ = 207;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 208;
      validate_non_negative_index("a_design", "N", N);
      current_statement__ = 209;
      validate_non_negative_index("a_design", "nAlpha_r", nAlpha_r);
      current_statement__ = 210;
      context__.validate_dims("data initialization","a_design","double",
          context__.to_vec(N, nAlpha_r));
      a_design = Eigen::Matrix<double, -1, -1>(N, nAlpha_r);
      stan::math::fill(a_design, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> a_design_flat__;
        current_statement__ = 210;
        assign(a_design_flat__, nil_index_list(),
          context__.vals_r("a_design"), "assigning variable a_design_flat__");
        current_statement__ = 210;
        pos__ = 1;
        current_statement__ = 210;
        for (int sym1__ = 1; sym1__ <= nAlpha_r; ++sym1__) {
          current_statement__ = 210;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 210;
            assign(a_design,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              a_design_flat__[(pos__ - 1)], "assigning variable a_design");
            current_statement__ = 210;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 211;
      context__.validate_dims("data initialization","Lzeta","int",
          context__.to_vec());
      Lzeta = std::numeric_limits<int>::min();
      
      current_statement__ = 211;
      Lzeta = context__.vals_i("Lzeta")[(1 - 1)];
      current_statement__ = 211;
      current_statement__ = 211;
      check_greater_or_equal(function__, "Lzeta", Lzeta, 0);
      current_statement__ = 212;
      context__.validate_dims("data initialization","Laeta","int",
          context__.to_vec());
      Laeta = std::numeric_limits<int>::min();
      
      current_statement__ = 212;
      Laeta = context__.vals_i("Laeta")[(1 - 1)];
      current_statement__ = 212;
      current_statement__ = 212;
      check_greater_or_equal(function__, "Laeta", Laeta, 0);
      current_statement__ = 213;
      context__.validate_dims("data initialization","Ldeta","int",
          context__.to_vec());
      Ldeta = std::numeric_limits<int>::min();
      
      current_statement__ = 213;
      Ldeta = context__.vals_i("Ldeta")[(1 - 1)];
      current_statement__ = 213;
      current_statement__ = 213;
      check_greater_or_equal(function__, "Ldeta", Ldeta, 0);
      current_statement__ = 214;
      context__.validate_dims("data initialization","u_Lzeta_cor","int",
          context__.to_vec());
      u_Lzeta_cor = std::numeric_limits<int>::min();
      
      current_statement__ = 214;
      u_Lzeta_cor = context__.vals_i("u_Lzeta_cor")[(1 - 1)];
      current_statement__ = 214;
      current_statement__ = 214;
      check_greater_or_equal(function__, "u_Lzeta_cor", u_Lzeta_cor, 0);
      current_statement__ = 215;
      context__.validate_dims("data initialization","l_Lzeta_cor","int",
          context__.to_vec());
      l_Lzeta_cor = std::numeric_limits<int>::min();
      
      current_statement__ = 215;
      l_Lzeta_cor = context__.vals_i("l_Lzeta_cor")[(1 - 1)];
      current_statement__ = 215;
      current_statement__ = 215;
      check_greater_or_equal(function__, "l_Lzeta_cor", l_Lzeta_cor, 0);
      current_statement__ = 216;
      context__.validate_dims("data initialization","u_Laeta_cor","int",
          context__.to_vec());
      u_Laeta_cor = std::numeric_limits<int>::min();
      
      current_statement__ = 216;
      u_Laeta_cor = context__.vals_i("u_Laeta_cor")[(1 - 1)];
      current_statement__ = 216;
      current_statement__ = 216;
      check_greater_or_equal(function__, "u_Laeta_cor", u_Laeta_cor, 0);
      current_statement__ = 217;
      context__.validate_dims("data initialization","l_Laeta_cor","int",
          context__.to_vec());
      l_Laeta_cor = std::numeric_limits<int>::min();
      
      current_statement__ = 217;
      l_Laeta_cor = context__.vals_i("l_Laeta_cor")[(1 - 1)];
      current_statement__ = 217;
      current_statement__ = 217;
      check_greater_or_equal(function__, "l_Laeta_cor", l_Laeta_cor, 0);
      current_statement__ = 218;
      context__.validate_dims("data initialization","u_Ldeta_cor","int",
          context__.to_vec());
      u_Ldeta_cor = std::numeric_limits<int>::min();
      
      current_statement__ = 218;
      u_Ldeta_cor = context__.vals_i("u_Ldeta_cor")[(1 - 1)];
      current_statement__ = 218;
      current_statement__ = 218;
      check_greater_or_equal(function__, "u_Ldeta_cor", u_Ldeta_cor, 0);
      current_statement__ = 219;
      context__.validate_dims("data initialization","l_Ldeta_cor","int",
          context__.to_vec());
      l_Ldeta_cor = std::numeric_limits<int>::min();
      
      current_statement__ = 219;
      l_Ldeta_cor = context__.vals_i("l_Ldeta_cor")[(1 - 1)];
      current_statement__ = 219;
      current_statement__ = 219;
      check_greater_or_equal(function__, "l_Ldeta_cor", l_Ldeta_cor, 0);
      current_statement__ = 220;
      context__.validate_dims("data initialization","Lzeta_cor","int",
          context__.to_vec());
      Lzeta_cor = std::numeric_limits<int>::min();
      
      current_statement__ = 220;
      Lzeta_cor = context__.vals_i("Lzeta_cor")[(1 - 1)];
      current_statement__ = 220;
      current_statement__ = 220;
      check_greater_or_equal(function__, "Lzeta_cor", Lzeta_cor, 0);
      current_statement__ = 221;
      context__.validate_dims("data initialization","Laeta_cor","int",
          context__.to_vec());
      Laeta_cor = std::numeric_limits<int>::min();
      
      current_statement__ = 221;
      Laeta_cor = context__.vals_i("Laeta_cor")[(1 - 1)];
      current_statement__ = 221;
      current_statement__ = 221;
      check_greater_or_equal(function__, "Laeta_cor", Laeta_cor, 0);
      current_statement__ = 222;
      context__.validate_dims("data initialization","Ldeta_cor","int",
          context__.to_vec());
      Ldeta_cor = std::numeric_limits<int>::min();
      
      current_statement__ = 222;
      Ldeta_cor = context__.vals_i("Ldeta_cor")[(1 - 1)];
      current_statement__ = 222;
      current_statement__ = 222;
      check_greater_or_equal(function__, "Ldeta_cor", Ldeta_cor, 0);
      current_statement__ = 223;
      validate_non_negative_index("z", "N", N);
      current_statement__ = 224;
      validate_non_negative_index("z", "Lzeta", Lzeta);
      current_statement__ = 225;
      context__.validate_dims("data initialization","z","double",
          context__.to_vec(N, Lzeta));
      z = Eigen::Matrix<double, -1, -1>(N, Lzeta);
      stan::math::fill(z, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> z_flat__;
        current_statement__ = 225;
        assign(z_flat__, nil_index_list(), context__.vals_r("z"),
          "assigning variable z_flat__");
        current_statement__ = 225;
        pos__ = 1;
        current_statement__ = 225;
        for (int sym1__ = 1; sym1__ <= Lzeta; ++sym1__) {
          current_statement__ = 225;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 225;
            assign(z,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              z_flat__[(pos__ - 1)], "assigning variable z");
            current_statement__ = 225;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 226;
      validate_non_negative_index("ar", "N", N);
      current_statement__ = 227;
      validate_non_negative_index("ar", "Laeta", Laeta);
      current_statement__ = 228;
      context__.validate_dims("data initialization","ar","double",
          context__.to_vec(N, Laeta));
      ar = Eigen::Matrix<double, -1, -1>(N, Laeta);
      stan::math::fill(ar, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> ar_flat__;
        current_statement__ = 228;
        assign(ar_flat__, nil_index_list(), context__.vals_r("ar"),
          "assigning variable ar_flat__");
        current_statement__ = 228;
        pos__ = 1;
        current_statement__ = 228;
        for (int sym1__ = 1; sym1__ <= Laeta; ++sym1__) {
          current_statement__ = 228;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 228;
            assign(ar,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              ar_flat__[(pos__ - 1)], "assigning variable ar");
            current_statement__ = 228;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 229;
      validate_non_negative_index("dr", "N", N);
      current_statement__ = 230;
      validate_non_negative_index("dr", "Ldeta", Ldeta);
      current_statement__ = 231;
      context__.validate_dims("data initialization","dr","double",
          context__.to_vec(N, Ldeta));
      dr = Eigen::Matrix<double, -1, -1>(N, Ldeta);
      stan::math::fill(dr, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> dr_flat__;
        current_statement__ = 231;
        assign(dr_flat__, nil_index_list(), context__.vals_r("dr"),
          "assigning variable dr_flat__");
        current_statement__ = 231;
        pos__ = 1;
        current_statement__ = 231;
        for (int sym1__ = 1; sym1__ <= Ldeta; ++sym1__) {
          current_statement__ = 231;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 231;
            assign(dr,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              dr_flat__[(pos__ - 1)], "assigning variable dr");
            current_statement__ = 231;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 232;
      context__.validate_dims("data initialization","Lzeta_sd","int",
          context__.to_vec());
      Lzeta_sd = std::numeric_limits<int>::min();
      
      current_statement__ = 232;
      Lzeta_sd = context__.vals_i("Lzeta_sd")[(1 - 1)];
      current_statement__ = 232;
      current_statement__ = 232;
      check_greater_or_equal(function__, "Lzeta_sd", Lzeta_sd, 0);
      current_statement__ = 233;
      validate_non_negative_index("zeta_sd_ind", "Lzeta", Lzeta);
      current_statement__ = 234;
      context__.validate_dims("data initialization","zeta_sd_ind","int",
          context__.to_vec(Lzeta));
      zeta_sd_ind = std::vector<int>(Lzeta, std::numeric_limits<int>::min());
      
      current_statement__ = 234;
      assign(zeta_sd_ind, nil_index_list(), context__.vals_i("zeta_sd_ind"),
        "assigning variable zeta_sd_ind");
      current_statement__ = 234;
      for (int sym1__ = 1; sym1__ <= Lzeta; ++sym1__) {
        current_statement__ = 234;
        current_statement__ = 234;
        check_greater_or_equal(function__, "zeta_sd_ind[sym1__]",
                               zeta_sd_ind[(sym1__ - 1)], 0);}
      current_statement__ = 235;
      validate_non_negative_index("cor_z_item_ind", "Lzeta_cor", Lzeta_cor);
      current_statement__ = 236;
      context__.validate_dims("data initialization","cor_z_item_ind","int",
          context__.to_vec(Lzeta_cor));
      cor_z_item_ind = std::vector<int>(Lzeta_cor, std::numeric_limits<int>::min());
      
      current_statement__ = 236;
      assign(cor_z_item_ind, nil_index_list(),
        context__.vals_i("cor_z_item_ind"),
        "assigning variable cor_z_item_ind");
      current_statement__ = 236;
      for (int sym1__ = 1; sym1__ <= Lzeta_cor; ++sym1__) {
        current_statement__ = 236;
        current_statement__ = 236;
        check_greater_or_equal(function__, "cor_z_item_ind[sym1__]",
                               cor_z_item_ind[(sym1__ - 1)], 0);}
      current_statement__ = 237;
      validate_non_negative_index("cor_z_item_elem_ind", "Lzeta_cor",
                                  Lzeta_cor);
      current_statement__ = 238;
      context__.validate_dims("data initialization","cor_z_item_elem_ind",
          "int",context__.to_vec(Lzeta_cor));
      cor_z_item_elem_ind = std::vector<int>(Lzeta_cor, std::numeric_limits<int>::min());
      
      current_statement__ = 238;
      assign(cor_z_item_elem_ind, nil_index_list(),
        context__.vals_i("cor_z_item_elem_ind"),
        "assigning variable cor_z_item_elem_ind");
      current_statement__ = 238;
      for (int sym1__ = 1; sym1__ <= Lzeta_cor; ++sym1__) {
        current_statement__ = 238;
        current_statement__ = 238;
        check_greater_or_equal(function__, "cor_z_item_elem_ind[sym1__]",
                               cor_z_item_elem_ind[(sym1__ - 1)], 0);}
      current_statement__ = 239;
      context__.validate_dims("data initialization","Laeta_sd","int",
          context__.to_vec());
      Laeta_sd = std::numeric_limits<int>::min();
      
      current_statement__ = 239;
      Laeta_sd = context__.vals_i("Laeta_sd")[(1 - 1)];
      current_statement__ = 239;
      current_statement__ = 239;
      check_greater_or_equal(function__, "Laeta_sd", Laeta_sd, 0);
      current_statement__ = 240;
      validate_non_negative_index("alindex", "Laeta", Laeta);
      current_statement__ = 241;
      context__.validate_dims("data initialization","alindex","int",
          context__.to_vec(Laeta));
      alindex = std::vector<int>(Laeta, std::numeric_limits<int>::min());
      
      current_statement__ = 241;
      assign(alindex, nil_index_list(), context__.vals_i("alindex"),
        "assigning variable alindex");
      current_statement__ = 241;
      for (int sym1__ = 1; sym1__ <= Laeta; ++sym1__) {
        current_statement__ = 241;
        current_statement__ = 241;
        check_greater_or_equal(function__, "alindex[sym1__]",
                               alindex[(sym1__ - 1)], 0);}
      current_statement__ = 242;
      validate_non_negative_index("aeta_sd_ind", "Laeta", Laeta);
      current_statement__ = 243;
      context__.validate_dims("data initialization","aeta_sd_ind","int",
          context__.to_vec(Laeta));
      aeta_sd_ind = std::vector<int>(Laeta, std::numeric_limits<int>::min());
      
      current_statement__ = 243;
      assign(aeta_sd_ind, nil_index_list(), context__.vals_i("aeta_sd_ind"),
        "assigning variable aeta_sd_ind");
      current_statement__ = 243;
      for (int sym1__ = 1; sym1__ <= Laeta; ++sym1__) {
        current_statement__ = 243;
        current_statement__ = 243;
        check_greater_or_equal(function__, "aeta_sd_ind[sym1__]",
                               aeta_sd_ind[(sym1__ - 1)], 0);}
      current_statement__ = 244;
      validate_non_negative_index("cor_a_item_ind", "Laeta_cor", Laeta_cor);
      current_statement__ = 245;
      context__.validate_dims("data initialization","cor_a_item_ind","int",
          context__.to_vec(Laeta_cor));
      cor_a_item_ind = std::vector<int>(Laeta_cor, std::numeric_limits<int>::min());
      
      current_statement__ = 245;
      assign(cor_a_item_ind, nil_index_list(),
        context__.vals_i("cor_a_item_ind"),
        "assigning variable cor_a_item_ind");
      current_statement__ = 245;
      for (int sym1__ = 1; sym1__ <= Laeta_cor; ++sym1__) {
        current_statement__ = 245;
        current_statement__ = 245;
        check_greater_or_equal(function__, "cor_a_item_ind[sym1__]",
                               cor_a_item_ind[(sym1__ - 1)], 0);}
      current_statement__ = 246;
      validate_non_negative_index("cor_a_item_elem_ind", "Laeta_cor",
                                  Laeta_cor);
      current_statement__ = 247;
      context__.validate_dims("data initialization","cor_a_item_elem_ind",
          "int",context__.to_vec(Laeta_cor));
      cor_a_item_elem_ind = std::vector<int>(Laeta_cor, std::numeric_limits<int>::min());
      
      current_statement__ = 247;
      assign(cor_a_item_elem_ind, nil_index_list(),
        context__.vals_i("cor_a_item_elem_ind"),
        "assigning variable cor_a_item_elem_ind");
      current_statement__ = 247;
      for (int sym1__ = 1; sym1__ <= Laeta_cor; ++sym1__) {
        current_statement__ = 247;
        current_statement__ = 247;
        check_greater_or_equal(function__, "cor_a_item_elem_ind[sym1__]",
                               cor_a_item_elem_ind[(sym1__ - 1)], 0);}
      current_statement__ = 248;
      context__.validate_dims("data initialization","Ldeta_sd","int",
          context__.to_vec());
      Ldeta_sd = std::numeric_limits<int>::min();
      
      current_statement__ = 248;
      Ldeta_sd = context__.vals_i("Ldeta_sd")[(1 - 1)];
      current_statement__ = 248;
      current_statement__ = 248;
      check_greater_or_equal(function__, "Ldeta_sd", Ldeta_sd, 0);
      current_statement__ = 249;
      validate_non_negative_index("dlindex", "Ldeta", Ldeta);
      current_statement__ = 250;
      context__.validate_dims("data initialization","dlindex","int",
          context__.to_vec(Ldeta));
      dlindex = std::vector<int>(Ldeta, std::numeric_limits<int>::min());
      
      current_statement__ = 250;
      assign(dlindex, nil_index_list(), context__.vals_i("dlindex"),
        "assigning variable dlindex");
      current_statement__ = 250;
      for (int sym1__ = 1; sym1__ <= Ldeta; ++sym1__) {
        current_statement__ = 250;
        current_statement__ = 250;
        check_greater_or_equal(function__, "dlindex[sym1__]",
                               dlindex[(sym1__ - 1)], 0);}
      current_statement__ = 251;
      validate_non_negative_index("deta_sd_ind", "Ldeta", Ldeta);
      current_statement__ = 252;
      context__.validate_dims("data initialization","deta_sd_ind","int",
          context__.to_vec(Ldeta));
      deta_sd_ind = std::vector<int>(Ldeta, std::numeric_limits<int>::min());
      
      current_statement__ = 252;
      assign(deta_sd_ind, nil_index_list(), context__.vals_i("deta_sd_ind"),
        "assigning variable deta_sd_ind");
      current_statement__ = 252;
      for (int sym1__ = 1; sym1__ <= Ldeta; ++sym1__) {
        current_statement__ = 252;
        current_statement__ = 252;
        check_greater_or_equal(function__, "deta_sd_ind[sym1__]",
                               deta_sd_ind[(sym1__ - 1)], 0);}
      current_statement__ = 253;
      validate_non_negative_index("cor_d_item_ind", "Ldeta_cor", Ldeta_cor);
      current_statement__ = 254;
      context__.validate_dims("data initialization","cor_d_item_ind","int",
          context__.to_vec(Ldeta_cor));
      cor_d_item_ind = std::vector<int>(Ldeta_cor, std::numeric_limits<int>::min());
      
      current_statement__ = 254;
      assign(cor_d_item_ind, nil_index_list(),
        context__.vals_i("cor_d_item_ind"),
        "assigning variable cor_d_item_ind");
      current_statement__ = 254;
      for (int sym1__ = 1; sym1__ <= Ldeta_cor; ++sym1__) {
        current_statement__ = 254;
        current_statement__ = 254;
        check_greater_or_equal(function__, "cor_d_item_ind[sym1__]",
                               cor_d_item_ind[(sym1__ - 1)], 0);}
      current_statement__ = 255;
      validate_non_negative_index("cor_d_item_elem_ind", "Ldeta_cor",
                                  Ldeta_cor);
      current_statement__ = 256;
      context__.validate_dims("data initialization","cor_d_item_elem_ind",
          "int",context__.to_vec(Ldeta_cor));
      cor_d_item_elem_ind = std::vector<int>(Ldeta_cor, std::numeric_limits<int>::min());
      
      current_statement__ = 256;
      assign(cor_d_item_elem_ind, nil_index_list(),
        context__.vals_i("cor_d_item_elem_ind"),
        "assigning variable cor_d_item_elem_ind");
      current_statement__ = 256;
      for (int sym1__ = 1; sym1__ <= Ldeta_cor; ++sym1__) {
        current_statement__ = 256;
        current_statement__ = 256;
        check_greater_or_equal(function__, "cor_d_item_elem_ind[sym1__]",
                               cor_d_item_elem_ind[(sym1__ - 1)], 0);}
      current_statement__ = 257;
      validate_non_negative_index("z_c", "N", N);
      current_statement__ = 258;
      validate_non_negative_index("z_c", "Lzeta_cor", Lzeta_cor);
      current_statement__ = 259;
      context__.validate_dims("data initialization","z_c","double",
          context__.to_vec(N, Lzeta_cor));
      z_c = Eigen::Matrix<double, -1, -1>(N, Lzeta_cor);
      stan::math::fill(z_c, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> z_c_flat__;
        current_statement__ = 259;
        assign(z_c_flat__, nil_index_list(), context__.vals_r("z_c"),
          "assigning variable z_c_flat__");
        current_statement__ = 259;
        pos__ = 1;
        current_statement__ = 259;
        for (int sym1__ = 1; sym1__ <= Lzeta_cor; ++sym1__) {
          current_statement__ = 259;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 259;
            assign(z_c,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              z_c_flat__[(pos__ - 1)], "assigning variable z_c");
            current_statement__ = 259;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 260;
      validate_non_negative_index("a_c", "N", N);
      current_statement__ = 261;
      validate_non_negative_index("a_c", "Laeta_cor", Laeta_cor);
      current_statement__ = 262;
      context__.validate_dims("data initialization","a_c","double",
          context__.to_vec(N, Laeta_cor));
      a_c = Eigen::Matrix<double, -1, -1>(N, Laeta_cor);
      stan::math::fill(a_c, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> a_c_flat__;
        current_statement__ = 262;
        assign(a_c_flat__, nil_index_list(), context__.vals_r("a_c"),
          "assigning variable a_c_flat__");
        current_statement__ = 262;
        pos__ = 1;
        current_statement__ = 262;
        for (int sym1__ = 1; sym1__ <= Laeta_cor; ++sym1__) {
          current_statement__ = 262;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 262;
            assign(a_c,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              a_c_flat__[(pos__ - 1)], "assigning variable a_c");
            current_statement__ = 262;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 263;
      validate_non_negative_index("d_c", "N", N);
      current_statement__ = 264;
      validate_non_negative_index("d_c", "Ldeta_cor", Ldeta_cor);
      current_statement__ = 265;
      context__.validate_dims("data initialization","d_c","double",
          context__.to_vec(N, Ldeta_cor));
      d_c = Eigen::Matrix<double, -1, -1>(N, Ldeta_cor);
      stan::math::fill(d_c, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> d_c_flat__;
        current_statement__ = 265;
        assign(d_c_flat__, nil_index_list(), context__.vals_r("d_c"),
          "assigning variable d_c_flat__");
        current_statement__ = 265;
        pos__ = 1;
        current_statement__ = 265;
        for (int sym1__ = 1; sym1__ <= Ldeta_cor; ++sym1__) {
          current_statement__ = 265;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 265;
            assign(d_c,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              d_c_flat__[(pos__ - 1)], "assigning variable d_c");
            current_statement__ = 265;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 266;
      validate_non_negative_index("zeros_Lzeta_cor", "l_Lzeta_cor",
                                  l_Lzeta_cor);
      current_statement__ = 267;
      zeros_Lzeta_cor = Eigen::Matrix<double, -1, 1>(l_Lzeta_cor);
      stan::math::fill(zeros_Lzeta_cor, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 268;
      assign(zeros_Lzeta_cor, nil_index_list(), rep_vector(0, l_Lzeta_cor),
        "assigning variable zeros_Lzeta_cor");
      current_statement__ = 269;
      validate_non_negative_index("zeros_Laeta_cor", "l_Laeta_cor",
                                  l_Laeta_cor);
      current_statement__ = 270;
      zeros_Laeta_cor = Eigen::Matrix<double, -1, 1>(l_Laeta_cor);
      stan::math::fill(zeros_Laeta_cor, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 271;
      assign(zeros_Laeta_cor, nil_index_list(), rep_vector(0, l_Laeta_cor),
        "assigning variable zeros_Laeta_cor");
      current_statement__ = 272;
      validate_non_negative_index("zeros_Ldeta_cor", "l_Ldeta_cor",
                                  l_Ldeta_cor);
      current_statement__ = 273;
      zeros_Ldeta_cor = Eigen::Matrix<double, -1, 1>(l_Ldeta_cor);
      stan::math::fill(zeros_Ldeta_cor, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 274;
      assign(zeros_Ldeta_cor, nil_index_list(), rep_vector(0, l_Ldeta_cor),
        "assigning variable zeros_Ldeta_cor");
      current_statement__ = 275;
      validate_non_negative_index("theta", "N", N);
      current_statement__ = 276;
      validate_non_negative_index("theta", "D", D);
      current_statement__ = 277;
      validate_non_negative_index("delta_l", "nDelta", nDelta);
      current_statement__ = 278;
      validate_non_negative_index("delta_r_l", "nDelta_r", nDelta_r);
      current_statement__ = 279;
      validate_non_negative_index("alpha_l", "L", L);
      current_statement__ = 280;
      validate_non_negative_index("alpha_r_l", "nAlpha_r", nAlpha_r);
      current_statement__ = 281;
      validate_non_negative_index("beta_l", "K", K);
      current_statement__ = 282;
      validate_non_negative_index("zeta_l", "Lzeta", Lzeta);
      current_statement__ = 283;
      validate_non_negative_index("zeta_l_sd", "Lzeta_sd", Lzeta_sd);
      current_statement__ = 284;
      validate_non_negative_index("aeta_l", "Laeta", Laeta);
      current_statement__ = 285;
      validate_non_negative_index("aeta_l_sd", "Laeta_sd", Laeta_sd);
      current_statement__ = 286;
      validate_non_negative_index("deta_l", "Ldeta", Ldeta);
      current_statement__ = 287;
      validate_non_negative_index("deta_l_sd", "Ldeta_sd", Ldeta_sd);
      current_statement__ = 288;
      validate_non_negative_index("Omega", "l_Lzeta_cor", l_Lzeta_cor);
      current_statement__ = 288;
      validate_non_negative_index("Omega", "l_Lzeta_cor", l_Lzeta_cor);
      current_statement__ = 289;
      validate_non_negative_index("tau", "l_Lzeta_cor", l_Lzeta_cor);
      current_statement__ = 290;
      validate_non_negative_index("Omega_a", "l_Laeta_cor", l_Laeta_cor);
      current_statement__ = 290;
      validate_non_negative_index("Omega_a", "l_Laeta_cor", l_Laeta_cor);
      current_statement__ = 291;
      validate_non_negative_index("tau_a", "l_Laeta_cor", l_Laeta_cor);
      current_statement__ = 292;
      validate_non_negative_index("Omega_d", "l_Ldeta_cor", l_Ldeta_cor);
      current_statement__ = 292;
      validate_non_negative_index("Omega_d", "l_Ldeta_cor", l_Ldeta_cor);
      current_statement__ = 293;
      validate_non_negative_index("tau_d", "l_Ldeta_cor", l_Ldeta_cor);
      current_statement__ = 294;
      validate_non_negative_index("zeta_c", "u_Lzeta_cor", u_Lzeta_cor);
      current_statement__ = 295;
      validate_non_negative_index("zeta_c", "l_Lzeta_cor", l_Lzeta_cor);
      current_statement__ = 296;
      validate_non_negative_index("aeta_c", "u_Laeta_cor", u_Laeta_cor);
      current_statement__ = 297;
      validate_non_negative_index("aeta_c", "l_Laeta_cor", l_Laeta_cor);
      current_statement__ = 298;
      validate_non_negative_index("deta_c", "u_Ldeta_cor", u_Ldeta_cor);
      current_statement__ = 299;
      validate_non_negative_index("deta_c", "l_Ldeta_cor", l_Ldeta_cor);
      current_statement__ = 300;
      validate_non_negative_index("alpha", "D", D);
      current_statement__ = 301;
      validate_non_negative_index("alpha", "J", J);
      current_statement__ = 302;
      validate_non_negative_index("beta", "K", K);
      current_statement__ = 303;
      validate_non_negative_index("beta", "D", D);
      current_statement__ = 304;
      validate_non_negative_index("zeta", "Lzeta", Lzeta);
      current_statement__ = 305;
      validate_non_negative_index("zeta", "D", D);
      current_statement__ = 306;
      validate_non_negative_index("delta_trans", "J", J);
      current_statement__ = 307;
      delta_trans_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 307;
      delta_trans_2dim__ = (Ncateg_max - 1);
      current_statement__ = 307;
      validate_non_negative_index("delta_trans", "Ncateg_max - 1",
                                  delta_trans_2dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += N * D;
      num_params_r__ += nDelta;
      num_params_r__ += nDelta_r;
      num_params_r__ += L;
      num_params_r__ += nAlpha_r;
      num_params_r__ += K;
      num_params_r__ += Lzeta;
      num_params_r__ += Lzeta_sd;
      num_params_r__ += Laeta;
      num_params_r__ += Laeta_sd;
      num_params_r__ += Ldeta;
      num_params_r__ += Ldeta_sd;
      num_params_r__ += ((l_Lzeta_cor * (l_Lzeta_cor - 1)) / 2);
      num_params_r__ += l_Lzeta_cor;
      num_params_r__ += ((l_Laeta_cor * (l_Laeta_cor - 1)) / 2);
      num_params_r__ += l_Laeta_cor;
      num_params_r__ += ((l_Ldeta_cor * (l_Ldeta_cor - 1)) / 2);
      num_params_r__ += l_Ldeta_cor;
      num_params_r__ += u_Lzeta_cor * l_Lzeta_cor;
      num_params_r__ += u_Laeta_cor * l_Laeta_cor;
      num_params_r__ += u_Ldeta_cor * l_Ldeta_cor;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_inirt_unidim_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, -1> theta;
      theta = Eigen::Matrix<local_scalar_t__, -1, -1>(N, D);
      stan::math::fill(theta, DUMMY_VAR__);
      
      current_statement__ = 1;
      theta = in__.matrix(N, D);
      Eigen::Matrix<local_scalar_t__, -1, 1> delta_l;
      delta_l = Eigen::Matrix<local_scalar_t__, -1, 1>(nDelta);
      stan::math::fill(delta_l, DUMMY_VAR__);
      
      current_statement__ = 2;
      delta_l = in__.vector(nDelta);
      Eigen::Matrix<local_scalar_t__, -1, 1> delta_r_l;
      delta_r_l = Eigen::Matrix<local_scalar_t__, -1, 1>(nDelta_r);
      stan::math::fill(delta_r_l, DUMMY_VAR__);
      
      current_statement__ = 3;
      delta_r_l = in__.vector(nDelta_r);
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha_l;
      alpha_l = Eigen::Matrix<local_scalar_t__, -1, 1>(L);
      stan::math::fill(alpha_l, DUMMY_VAR__);
      
      current_statement__ = 4;
      alpha_l = in__.vector(L);
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 4;
        if (jacobian__) {
          current_statement__ = 4;
          assign(alpha_l, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha_l[(sym1__ - 1)], 0, lp__),
            "assigning variable alpha_l");
        } else {
          current_statement__ = 4;
          assign(alpha_l, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha_l[(sym1__ - 1)], 0),
            "assigning variable alpha_l");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha_r_l;
      alpha_r_l = Eigen::Matrix<local_scalar_t__, -1, 1>(nAlpha_r);
      stan::math::fill(alpha_r_l, DUMMY_VAR__);
      
      current_statement__ = 5;
      alpha_r_l = in__.vector(nAlpha_r);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_l;
      beta_l = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(beta_l, DUMMY_VAR__);
      
      current_statement__ = 6;
      beta_l = in__.vector(K);
      Eigen::Matrix<local_scalar_t__, -1, 1> zeta_l;
      zeta_l = Eigen::Matrix<local_scalar_t__, -1, 1>(Lzeta);
      stan::math::fill(zeta_l, DUMMY_VAR__);
      
      current_statement__ = 7;
      zeta_l = in__.vector(Lzeta);
      Eigen::Matrix<local_scalar_t__, -1, 1> zeta_l_sd;
      zeta_l_sd = Eigen::Matrix<local_scalar_t__, -1, 1>(Lzeta_sd);
      stan::math::fill(zeta_l_sd, DUMMY_VAR__);
      
      current_statement__ = 8;
      zeta_l_sd = in__.vector(Lzeta_sd);
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= Lzeta_sd; ++sym1__) {
        current_statement__ = 8;
        if (jacobian__) {
          current_statement__ = 8;
          assign(zeta_l_sd, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(zeta_l_sd[(sym1__ - 1)], 0, lp__),
            "assigning variable zeta_l_sd");
        } else {
          current_statement__ = 8;
          assign(zeta_l_sd, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(zeta_l_sd[(sym1__ - 1)], 0),
            "assigning variable zeta_l_sd");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> aeta_l;
      aeta_l = Eigen::Matrix<local_scalar_t__, -1, 1>(Laeta);
      stan::math::fill(aeta_l, DUMMY_VAR__);
      
      current_statement__ = 9;
      aeta_l = in__.vector(Laeta);
      Eigen::Matrix<local_scalar_t__, -1, 1> aeta_l_sd;
      aeta_l_sd = Eigen::Matrix<local_scalar_t__, -1, 1>(Laeta_sd);
      stan::math::fill(aeta_l_sd, DUMMY_VAR__);
      
      current_statement__ = 10;
      aeta_l_sd = in__.vector(Laeta_sd);
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= Laeta_sd; ++sym1__) {
        current_statement__ = 10;
        if (jacobian__) {
          current_statement__ = 10;
          assign(aeta_l_sd, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(aeta_l_sd[(sym1__ - 1)], 0, lp__),
            "assigning variable aeta_l_sd");
        } else {
          current_statement__ = 10;
          assign(aeta_l_sd, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(aeta_l_sd[(sym1__ - 1)], 0),
            "assigning variable aeta_l_sd");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> deta_l;
      deta_l = Eigen::Matrix<local_scalar_t__, -1, 1>(Ldeta);
      stan::math::fill(deta_l, DUMMY_VAR__);
      
      current_statement__ = 11;
      deta_l = in__.vector(Ldeta);
      Eigen::Matrix<local_scalar_t__, -1, 1> deta_l_sd;
      deta_l_sd = Eigen::Matrix<local_scalar_t__, -1, 1>(Ldeta_sd);
      stan::math::fill(deta_l_sd, DUMMY_VAR__);
      
      current_statement__ = 12;
      deta_l_sd = in__.vector(Ldeta_sd);
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= Ldeta_sd; ++sym1__) {
        current_statement__ = 12;
        if (jacobian__) {
          current_statement__ = 12;
          assign(deta_l_sd, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(deta_l_sd[(sym1__ - 1)], 0, lp__),
            "assigning variable deta_l_sd");
        } else {
          current_statement__ = 12;
          assign(deta_l_sd, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(deta_l_sd[(sym1__ - 1)], 0),
            "assigning variable deta_l_sd");
        }}
      Eigen::Matrix<local_scalar_t__, -1, -1> Omega;
      Omega = Eigen::Matrix<local_scalar_t__, -1, -1>(l_Lzeta_cor, l_Lzeta_cor);
      stan::math::fill(Omega, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> Omega_in__;
      Omega_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((l_Lzeta_cor *
                                                             (l_Lzeta_cor -
                                                               1)) / 2));
      stan::math::fill(Omega_in__, DUMMY_VAR__);
      
      current_statement__ = 13;
      Omega_in__ = in__.vector(((l_Lzeta_cor * (l_Lzeta_cor - 1)) / 2));
      current_statement__ = 13;
      if (jacobian__) {
        current_statement__ = 13;
        assign(Omega, nil_index_list(),
          stan::math::corr_matrix_constrain(Omega_in__, l_Lzeta_cor, lp__),
          "assigning variable Omega");
      } else {
        current_statement__ = 13;
        assign(Omega, nil_index_list(),
          stan::math::corr_matrix_constrain(Omega_in__, l_Lzeta_cor),
          "assigning variable Omega");
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> tau;
      tau = Eigen::Matrix<local_scalar_t__, -1, 1>(l_Lzeta_cor);
      stan::math::fill(tau, DUMMY_VAR__);
      
      current_statement__ = 14;
      tau = in__.vector(l_Lzeta_cor);
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= l_Lzeta_cor; ++sym1__) {
        current_statement__ = 14;
        if (jacobian__) {
          current_statement__ = 14;
          assign(tau, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(tau[(sym1__ - 1)], 0, lp__),
            "assigning variable tau");
        } else {
          current_statement__ = 14;
          assign(tau, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(tau[(sym1__ - 1)], 0),
            "assigning variable tau");
        }}
      Eigen::Matrix<local_scalar_t__, -1, -1> Omega_a;
      Omega_a = Eigen::Matrix<local_scalar_t__, -1, -1>(l_Laeta_cor, l_Laeta_cor);
      stan::math::fill(Omega_a, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> Omega_a_in__;
      Omega_a_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((l_Laeta_cor *
                                                               (l_Laeta_cor -
                                                                 1)) / 2));
      stan::math::fill(Omega_a_in__, DUMMY_VAR__);
      
      current_statement__ = 15;
      Omega_a_in__ = in__.vector(((l_Laeta_cor * (l_Laeta_cor - 1)) / 2));
      current_statement__ = 15;
      if (jacobian__) {
        current_statement__ = 15;
        assign(Omega_a, nil_index_list(),
          stan::math::corr_matrix_constrain(Omega_a_in__, l_Laeta_cor, lp__),
          "assigning variable Omega_a");
      } else {
        current_statement__ = 15;
        assign(Omega_a, nil_index_list(),
          stan::math::corr_matrix_constrain(Omega_a_in__, l_Laeta_cor),
          "assigning variable Omega_a");
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> tau_a;
      tau_a = Eigen::Matrix<local_scalar_t__, -1, 1>(l_Laeta_cor);
      stan::math::fill(tau_a, DUMMY_VAR__);
      
      current_statement__ = 16;
      tau_a = in__.vector(l_Laeta_cor);
      current_statement__ = 16;
      for (int sym1__ = 1; sym1__ <= l_Laeta_cor; ++sym1__) {
        current_statement__ = 16;
        if (jacobian__) {
          current_statement__ = 16;
          assign(tau_a, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(tau_a[(sym1__ - 1)], 0, lp__),
            "assigning variable tau_a");
        } else {
          current_statement__ = 16;
          assign(tau_a, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(tau_a[(sym1__ - 1)], 0),
            "assigning variable tau_a");
        }}
      Eigen::Matrix<local_scalar_t__, -1, -1> Omega_d;
      Omega_d = Eigen::Matrix<local_scalar_t__, -1, -1>(l_Ldeta_cor, l_Ldeta_cor);
      stan::math::fill(Omega_d, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> Omega_d_in__;
      Omega_d_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((l_Ldeta_cor *
                                                               (l_Ldeta_cor -
                                                                 1)) / 2));
      stan::math::fill(Omega_d_in__, DUMMY_VAR__);
      
      current_statement__ = 17;
      Omega_d_in__ = in__.vector(((l_Ldeta_cor * (l_Ldeta_cor - 1)) / 2));
      current_statement__ = 17;
      if (jacobian__) {
        current_statement__ = 17;
        assign(Omega_d, nil_index_list(),
          stan::math::corr_matrix_constrain(Omega_d_in__, l_Ldeta_cor, lp__),
          "assigning variable Omega_d");
      } else {
        current_statement__ = 17;
        assign(Omega_d, nil_index_list(),
          stan::math::corr_matrix_constrain(Omega_d_in__, l_Ldeta_cor),
          "assigning variable Omega_d");
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> tau_d;
      tau_d = Eigen::Matrix<local_scalar_t__, -1, 1>(l_Ldeta_cor);
      stan::math::fill(tau_d, DUMMY_VAR__);
      
      current_statement__ = 18;
      tau_d = in__.vector(l_Ldeta_cor);
      current_statement__ = 18;
      for (int sym1__ = 1; sym1__ <= l_Ldeta_cor; ++sym1__) {
        current_statement__ = 18;
        if (jacobian__) {
          current_statement__ = 18;
          assign(tau_d, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(tau_d[(sym1__ - 1)], 0, lp__),
            "assigning variable tau_d");
        } else {
          current_statement__ = 18;
          assign(tau_d, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(tau_d[(sym1__ - 1)], 0),
            "assigning variable tau_d");
        }}
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> zeta_c;
      zeta_c = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(u_Lzeta_cor, Eigen::Matrix<local_scalar_t__, -1, 1>(l_Lzeta_cor));
      stan::math::fill(zeta_c, DUMMY_VAR__);
      
      current_statement__ = 19;
      for (int sym1__ = 1; sym1__ <= u_Lzeta_cor; ++sym1__) {
        current_statement__ = 19;
        assign(zeta_c, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(l_Lzeta_cor), "assigning variable zeta_c");}
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> aeta_c;
      aeta_c = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(u_Laeta_cor, Eigen::Matrix<local_scalar_t__, -1, 1>(l_Laeta_cor));
      stan::math::fill(aeta_c, DUMMY_VAR__);
      
      current_statement__ = 20;
      for (int sym1__ = 1; sym1__ <= u_Laeta_cor; ++sym1__) {
        current_statement__ = 20;
        assign(aeta_c, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(l_Laeta_cor), "assigning variable aeta_c");}
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> deta_c;
      deta_c = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(u_Ldeta_cor, Eigen::Matrix<local_scalar_t__, -1, 1>(l_Ldeta_cor));
      stan::math::fill(deta_c, DUMMY_VAR__);
      
      current_statement__ = 21;
      for (int sym1__ = 1; sym1__ <= u_Ldeta_cor; ++sym1__) {
        current_statement__ = 21;
        assign(deta_c, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(l_Ldeta_cor), "assigning variable deta_c");}
      Eigen::Matrix<local_scalar_t__, -1, -1> alpha;
      alpha = Eigen::Matrix<local_scalar_t__, -1, -1>(D, J);
      stan::math::fill(alpha, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> beta;
      beta = Eigen::Matrix<local_scalar_t__, -1, -1>(K, D);
      stan::math::fill(beta, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> zeta;
      zeta = Eigen::Matrix<local_scalar_t__, -1, -1>(Lzeta, D);
      stan::math::fill(zeta, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> delta_trans;
      delta_trans = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(J, Eigen::Matrix<local_scalar_t__, -1, 1>(delta_trans_2dim__));
      stan::math::fill(delta_trans, DUMMY_VAR__);
      
      {
        int index;
        index = std::numeric_limits<int>::min();
        
        current_statement__ = 26;
        index = 0;
        current_statement__ = 32;
        for (int d = 1; d <= D; ++d) {
          current_statement__ = 30;
          for (int j = d; j <= J; ++j) {
            current_statement__ = 27;
            index = (index + 1);
            current_statement__ = 28;
            assign(alpha,
              cons_list(index_uni(d),
                cons_list(index_uni(j), nil_index_list())),
              alpha_l[(index - 1)], "assigning variable alpha");}}
      }
      {
        current_statement__ = 46;
        if (has_treg) {
          int bindex;
          bindex = std::numeric_limits<int>::min();
          
          current_statement__ = 34;
          bindex = 0;
          int b_lower;
          b_lower = std::numeric_limits<int>::min();
          
          current_statement__ = 35;
          b_lower = 0;
          int b_upper;
          b_upper = std::numeric_limits<int>::min();
          
          current_statement__ = 36;
          b_upper = 0;
          current_statement__ = 44;
          for (int d = 1; d <= D; ++d) {
            current_statement__ = 37;
            b_lower = beta_dstart[(d - 1)];
            current_statement__ = 38;
            b_upper = beta_dend[(d - 1)];
            current_statement__ = 42;
            for (int i = b_lower; i <= b_upper; ++i) {
              current_statement__ = 39;
              bindex = (bindex + 1);
              current_statement__ = 40;
              assign(beta,
                cons_list(index_uni(i),
                  cons_list(index_uni(d), nil_index_list())),
                beta_l[(bindex - 1)], "assigning variable beta");}}
        } 
      }
      {
        current_statement__ = 60;
        if (any_rand_ind) {
          int zindex;
          zindex = std::numeric_limits<int>::min();
          
          current_statement__ = 48;
          zindex = 0;
          int z_lower;
          z_lower = std::numeric_limits<int>::min();
          
          current_statement__ = 49;
          z_lower = 0;
          int z_upper;
          z_upper = std::numeric_limits<int>::min();
          
          current_statement__ = 50;
          z_upper = 0;
          current_statement__ = 58;
          for (int d = 1; d <= D; ++d) {
            current_statement__ = 51;
            z_lower = zeta_dstart[(d - 1)];
            current_statement__ = 52;
            z_upper = zeta_dend[(d - 1)];
            current_statement__ = 56;
            for (int i = z_lower; i <= z_upper; ++i) {
              current_statement__ = 53;
              zindex = (zindex + 1);
              current_statement__ = 54;
              assign(zeta,
                cons_list(index_uni(i),
                  cons_list(index_uni(d), nil_index_list())),
                (zeta_l[(zindex - 1)] *
                  zeta_l_sd[(zeta_sd_ind[(i - 1)] - 1)]),
                "assigning variable zeta");}}
        } 
      }
      {
        int idx;
        idx = std::numeric_limits<int>::min();
        
        current_statement__ = 62;
        idx = 0;
        int d_index;
        d_index = std::numeric_limits<int>::min();
        
        current_statement__ = 63;
        d_index = 0;
        current_statement__ = 75;
        for (int j = 1; j <= J; ++j) {
          current_statement__ = 64;
          validate_non_negative_index("ds_ind", "Ncategi[j] - 1",
                                      (Ncategi[(j - 1)] - 1));
          Eigen::Matrix<local_scalar_t__, -1, 1> ds_ind;
          ds_ind = Eigen::Matrix<local_scalar_t__, -1, 1>((Ncategi[(j - 1)] -
                                                            1));
          stan::math::fill(ds_ind, DUMMY_VAR__);
          
          current_statement__ = 65;
          assign(ds_ind, nil_index_list(),
            sort_asc(
              rvalue(delta_l,
                cons_list(
                  index_min_max((d_index + 1), ((d_index + Ncategi[(j - 1)])
                                                 - 1)), nil_index_list()),
                "delta_l")), "assigning variable ds_ind");
          current_statement__ = 69;
          for (int i = 1; i <= (Ncategi[(j - 1)] - 1); ++i) {
            current_statement__ = 66;
            d_index = (d_index + 1);
            current_statement__ = 67;
            assign(delta_trans,
              cons_list(index_uni(j),
                cons_list(index_uni(i), nil_index_list())), ds_ind[(i - 1)],
              "assigning variable delta_trans");}
          current_statement__ = 73;
          for (int i = Ncategi[(j - 1)]; i <= (Ncateg_max - 1); ++i) {
            current_statement__ = 70;
            assign(delta_trans,
              cons_list(index_uni(j),
                cons_list(index_uni(i), nil_index_list())), (1e7 + idx),
              "assigning variable delta_trans");
            current_statement__ = 71;
            idx = (idx + 1);}}
      }
      {
        current_statement__ = 77;
        lp_accum__.add(normal_lpdf<propto__>(to_vector(theta), 0, 1));
        current_statement__ = 78;
        lp_accum__.add(cauchy_lpdf<propto__>(alpha_l, 0, 5));
        current_statement__ = 79;
        lp_accum__.add(cauchy_lpdf<propto__>(alpha_r_l, 0, 5));
        current_statement__ = 80;
        lp_accum__.add(normal_lpdf<propto__>(delta_l, 0, 1));
        current_statement__ = 81;
        lp_accum__.add(normal_lpdf<propto__>(delta_r_l, 0, 1));
        current_statement__ = 84;
        if (has_treg) {
          current_statement__ = 82;
          lp_accum__.add(normal_lpdf<propto__>(beta_l, 0, 5));
        } 
        current_statement__ = 88;
        if (any_rand_ind) {
          current_statement__ = 85;
          lp_accum__.add(normal_lpdf<propto__>(zeta_l, 0, 1));
          current_statement__ = 86;
          lp_accum__.add(cauchy_lpdf<propto__>(zeta_l_sd, 0, 5));
        } 
        current_statement__ = 95;
        if (any_rand_cor) {
          current_statement__ = 89;
          lp_accum__.add(cauchy_lpdf<propto__>(tau, 0, 2.5));
          current_statement__ = 90;
          lp_accum__.add(lkj_corr_lpdf<propto__>(Omega, 1));
          current_statement__ = 93;
          for (int i = 1; i <= u_Lzeta_cor; ++i) {
            current_statement__ = 91;
            lp_accum__.add(
              multi_normal_lpdf<propto__>(zeta_c[(i - 1)], zeros_Lzeta_cor,
                quad_form_diag(Omega, tau)));}
        } 
        current_statement__ = 99;
        if (any_rand_ind_a) {
          current_statement__ = 96;
          lp_accum__.add(normal_lpdf<propto__>(aeta_l, 0, 1));
          current_statement__ = 97;
          lp_accum__.add(cauchy_lpdf<propto__>(aeta_l_sd, 0, 5));
        } 
        current_statement__ = 106;
        if (any_rand_cor_a) {
          current_statement__ = 100;
          lp_accum__.add(cauchy_lpdf<propto__>(tau_a, 0, 2.5));
          current_statement__ = 101;
          lp_accum__.add(lkj_corr_lpdf<propto__>(Omega_a, 1));
          current_statement__ = 104;
          for (int i = 1; i <= u_Laeta_cor; ++i) {
            current_statement__ = 102;
            lp_accum__.add(
              multi_normal_lpdf<propto__>(aeta_c[(i - 1)], zeros_Laeta_cor,
                quad_form_diag(Omega_a, tau_a)));}
        } 
        current_statement__ = 110;
        if (any_rand_ind_d) {
          current_statement__ = 107;
          lp_accum__.add(normal_lpdf<propto__>(deta_l, 0, 1));
          current_statement__ = 108;
          lp_accum__.add(cauchy_lpdf<propto__>(deta_l_sd, 0, 5));
        } 
        current_statement__ = 117;
        if (any_rand_cor_d) {
          current_statement__ = 111;
          lp_accum__.add(cauchy_lpdf<propto__>(tau_d, 0, 2.5));
          current_statement__ = 112;
          lp_accum__.add(lkj_corr_lpdf<propto__>(Omega_d, 1));
          current_statement__ = 115;
          for (int i = 1; i <= u_Ldeta_cor; ++i) {
            current_statement__ = 113;
            lp_accum__.add(
              multi_normal_lpdf<propto__>(deta_c[(i - 1)], zeros_Ldeta_cor,
                quad_form_diag(Omega_d, tau_d)));}
        } 
        {
          current_statement__ = 118;
          validate_non_negative_index("nu", "N_long", N_long);
          Eigen::Matrix<local_scalar_t__, -1, 1> nu;
          nu = Eigen::Matrix<local_scalar_t__, -1, 1>(N_long);
          stan::math::fill(nu, DUMMY_VAR__);
          
          current_statement__ = 161;
          for (int i = 1; i <= N_long; ++i) {
            local_scalar_t__ xb;
            xb = DUMMY_VAR__;
            
            current_statement__ = 120;
            xb = 0.0;
            local_scalar_t__ ab;
            ab = DUMMY_VAR__;
            
            current_statement__ = 121;
            ab = multiply(
                   rvalue(a_design,
                     cons_list(index_uni(nn[(i - 1)]),
                       cons_list(index_omni(), nil_index_list())),
                     "a_design"), alpha_r_l);
            local_scalar_t__ db;
            db = DUMMY_VAR__;
            
            current_statement__ = 122;
            db = multiply(
                   rvalue(d_design,
                     cons_list(index_uni(nn[(i - 1)]),
                       cons_list(index_omni(), nil_index_list())),
                     "d_design"), delta_r_l);
            current_statement__ = 127;
            for (int k = 1; k <= K; ++k) {
              current_statement__ = 125;
              if (logical_eq(
                    rvalue(x_miss,
                      cons_list(index_uni(i),
                        cons_list(index_uni(k), nil_index_list())), "x_miss"),
                    0)) {
                current_statement__ = 123;
                xb = (xb +
                       (rvalue(x,
                          cons_list(index_uni(nn[(i - 1)]),
                            cons_list(index_uni(k), nil_index_list())), "x")
                         *
                         rvalue(beta,
                           cons_list(index_uni(k),
                             cons_list(index_uni(1), nil_index_list())),
                           "beta")));
              } }
            current_statement__ = 132;
            if (any_rand_cor) {
              current_statement__ = 130;
              for (int k = 1; k <= Lzeta_cor; ++k) {
                current_statement__ = 128;
                xb = (xb +
                       (rvalue(z_c,
                          cons_list(index_uni(nn[(i - 1)]),
                            cons_list(index_uni(k), nil_index_list())),
                          "z_c") *
                         zeta_c[(cor_z_item_ind[(k - 1)] - 1)][(cor_z_item_elem_ind[
                                                                 (k - 1)] -
                                                                 1)]));}
            } 
            current_statement__ = 137;
            if (any_rand_ind) {
              current_statement__ = 135;
              for (int k = 1; k <= Lzeta; ++k) {
                current_statement__ = 133;
                xb = (xb +
                       (rvalue(z,
                          cons_list(index_uni(nn[(i - 1)]),
                            cons_list(index_uni(k), nil_index_list())), "z")
                         *
                         rvalue(zeta,
                           cons_list(index_uni(k),
                             cons_list(index_uni(1), nil_index_list())),
                           "zeta")));}
            } 
            current_statement__ = 142;
            if (any_rand_ind_a) {
              current_statement__ = 140;
              for (int k = 1; k <= Laeta; ++k) {
                current_statement__ = 138;
                ab = (ab +
                       ((rvalue(ar,
                           cons_list(index_uni(nn[(i - 1)]),
                             cons_list(index_uni(k), nil_index_list())),
                           "ar") * aeta_l[(alindex[(k - 1)] - 1)]) *
                         aeta_l_sd[(aeta_sd_ind[(k - 1)] - 1)]));}
            } 
            current_statement__ = 147;
            if (any_rand_cor_a) {
              current_statement__ = 145;
              for (int k = 1; k <= Laeta_cor; ++k) {
                current_statement__ = 143;
                ab = (ab +
                       (rvalue(a_c,
                          cons_list(index_uni(nn[(i - 1)]),
                            cons_list(index_uni(k), nil_index_list())),
                          "a_c") *
                         aeta_c[(cor_a_item_ind[(k - 1)] - 1)][(cor_a_item_elem_ind[
                                                                 (k - 1)] -
                                                                 1)]));}
            } 
            current_statement__ = 152;
            if (any_rand_ind_d) {
              current_statement__ = 150;
              for (int k = 1; k <= Ldeta; ++k) {
                current_statement__ = 148;
                db = (db +
                       ((rvalue(dr,
                           cons_list(index_uni(nn[(i - 1)]),
                             cons_list(index_uni(k), nil_index_list())),
                           "dr") * deta_l[(dlindex[(k - 1)] - 1)]) *
                         deta_l_sd[(deta_sd_ind[(k - 1)] - 1)]));}
            } 
            current_statement__ = 157;
            if (any_rand_cor_d) {
              current_statement__ = 155;
              for (int k = 1; k <= Ldeta_cor; ++k) {
                current_statement__ = 153;
                db = (db +
                       (rvalue(d_c,
                          cons_list(index_uni(nn[(i - 1)]),
                            cons_list(index_uni(k), nil_index_list())),
                          "d_c") *
                         deta_c[(cor_d_item_ind[(k - 1)] - 1)][(cor_d_item_elem_ind[
                                                                 (k - 1)] -
                                                                 1)]));}
            } 
            current_statement__ = 158;
            assign(nu, cons_list(index_uni(i), nil_index_list()),
              multiply(
                add(
                  rvalue(theta,
                    cons_list(index_uni(nn[(i - 1)]),
                      cons_list(index_omni(), nil_index_list())), "theta"),
                  xb), add(col(alpha, jj[(i - 1)]), ab)),
              "assigning variable nu");
            current_statement__ = 159;
            lp_accum__.add(
              (ordered_logistic_lpmf<false>(y[(i - 1)], nu[(i - 1)],
                 add(delta_trans[(jj[(i - 1)] - 1)], db)) * weights[(i - 1)]));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_inirt_unidim_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, -1> theta;
      theta = Eigen::Matrix<double, -1, -1>(N, D);
      stan::math::fill(theta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      theta = in__.matrix(N, D);
      Eigen::Matrix<double, -1, 1> delta_l;
      delta_l = Eigen::Matrix<double, -1, 1>(nDelta);
      stan::math::fill(delta_l, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      delta_l = in__.vector(nDelta);
      Eigen::Matrix<double, -1, 1> delta_r_l;
      delta_r_l = Eigen::Matrix<double, -1, 1>(nDelta_r);
      stan::math::fill(delta_r_l, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      delta_r_l = in__.vector(nDelta_r);
      Eigen::Matrix<double, -1, 1> alpha_l;
      alpha_l = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(alpha_l, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      alpha_l = in__.vector(L);
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 4;
        assign(alpha_l, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(alpha_l[(sym1__ - 1)], 0),
          "assigning variable alpha_l");}
      Eigen::Matrix<double, -1, 1> alpha_r_l;
      alpha_r_l = Eigen::Matrix<double, -1, 1>(nAlpha_r);
      stan::math::fill(alpha_r_l, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      alpha_r_l = in__.vector(nAlpha_r);
      Eigen::Matrix<double, -1, 1> beta_l;
      beta_l = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(beta_l, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      beta_l = in__.vector(K);
      Eigen::Matrix<double, -1, 1> zeta_l;
      zeta_l = Eigen::Matrix<double, -1, 1>(Lzeta);
      stan::math::fill(zeta_l, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      zeta_l = in__.vector(Lzeta);
      Eigen::Matrix<double, -1, 1> zeta_l_sd;
      zeta_l_sd = Eigen::Matrix<double, -1, 1>(Lzeta_sd);
      stan::math::fill(zeta_l_sd, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      zeta_l_sd = in__.vector(Lzeta_sd);
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= Lzeta_sd; ++sym1__) {
        current_statement__ = 8;
        assign(zeta_l_sd, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(zeta_l_sd[(sym1__ - 1)], 0),
          "assigning variable zeta_l_sd");}
      Eigen::Matrix<double, -1, 1> aeta_l;
      aeta_l = Eigen::Matrix<double, -1, 1>(Laeta);
      stan::math::fill(aeta_l, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      aeta_l = in__.vector(Laeta);
      Eigen::Matrix<double, -1, 1> aeta_l_sd;
      aeta_l_sd = Eigen::Matrix<double, -1, 1>(Laeta_sd);
      stan::math::fill(aeta_l_sd, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      aeta_l_sd = in__.vector(Laeta_sd);
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= Laeta_sd; ++sym1__) {
        current_statement__ = 10;
        assign(aeta_l_sd, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(aeta_l_sd[(sym1__ - 1)], 0),
          "assigning variable aeta_l_sd");}
      Eigen::Matrix<double, -1, 1> deta_l;
      deta_l = Eigen::Matrix<double, -1, 1>(Ldeta);
      stan::math::fill(deta_l, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      deta_l = in__.vector(Ldeta);
      Eigen::Matrix<double, -1, 1> deta_l_sd;
      deta_l_sd = Eigen::Matrix<double, -1, 1>(Ldeta_sd);
      stan::math::fill(deta_l_sd, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      deta_l_sd = in__.vector(Ldeta_sd);
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= Ldeta_sd; ++sym1__) {
        current_statement__ = 12;
        assign(deta_l_sd, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(deta_l_sd[(sym1__ - 1)], 0),
          "assigning variable deta_l_sd");}
      Eigen::Matrix<double, -1, -1> Omega;
      Omega = Eigen::Matrix<double, -1, -1>(l_Lzeta_cor, l_Lzeta_cor);
      stan::math::fill(Omega, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> Omega_in__;
      Omega_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((l_Lzeta_cor *
                                                             (l_Lzeta_cor -
                                                               1)) / 2));
      stan::math::fill(Omega_in__, DUMMY_VAR__);
      
      current_statement__ = 13;
      Omega_in__ = in__.vector(((l_Lzeta_cor * (l_Lzeta_cor - 1)) / 2));
      current_statement__ = 13;
      assign(Omega, nil_index_list(),
        stan::math::corr_matrix_constrain(Omega_in__, l_Lzeta_cor),
        "assigning variable Omega");
      Eigen::Matrix<double, -1, 1> tau;
      tau = Eigen::Matrix<double, -1, 1>(l_Lzeta_cor);
      stan::math::fill(tau, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 14;
      tau = in__.vector(l_Lzeta_cor);
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= l_Lzeta_cor; ++sym1__) {
        current_statement__ = 14;
        assign(tau, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(tau[(sym1__ - 1)], 0),
          "assigning variable tau");}
      Eigen::Matrix<double, -1, -1> Omega_a;
      Omega_a = Eigen::Matrix<double, -1, -1>(l_Laeta_cor, l_Laeta_cor);
      stan::math::fill(Omega_a, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> Omega_a_in__;
      Omega_a_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((l_Laeta_cor *
                                                               (l_Laeta_cor -
                                                                 1)) / 2));
      stan::math::fill(Omega_a_in__, DUMMY_VAR__);
      
      current_statement__ = 15;
      Omega_a_in__ = in__.vector(((l_Laeta_cor * (l_Laeta_cor - 1)) / 2));
      current_statement__ = 15;
      assign(Omega_a, nil_index_list(),
        stan::math::corr_matrix_constrain(Omega_a_in__, l_Laeta_cor),
        "assigning variable Omega_a");
      Eigen::Matrix<double, -1, 1> tau_a;
      tau_a = Eigen::Matrix<double, -1, 1>(l_Laeta_cor);
      stan::math::fill(tau_a, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 16;
      tau_a = in__.vector(l_Laeta_cor);
      current_statement__ = 16;
      for (int sym1__ = 1; sym1__ <= l_Laeta_cor; ++sym1__) {
        current_statement__ = 16;
        assign(tau_a, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(tau_a[(sym1__ - 1)], 0),
          "assigning variable tau_a");}
      Eigen::Matrix<double, -1, -1> Omega_d;
      Omega_d = Eigen::Matrix<double, -1, -1>(l_Ldeta_cor, l_Ldeta_cor);
      stan::math::fill(Omega_d, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> Omega_d_in__;
      Omega_d_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((l_Ldeta_cor *
                                                               (l_Ldeta_cor -
                                                                 1)) / 2));
      stan::math::fill(Omega_d_in__, DUMMY_VAR__);
      
      current_statement__ = 17;
      Omega_d_in__ = in__.vector(((l_Ldeta_cor * (l_Ldeta_cor - 1)) / 2));
      current_statement__ = 17;
      assign(Omega_d, nil_index_list(),
        stan::math::corr_matrix_constrain(Omega_d_in__, l_Ldeta_cor),
        "assigning variable Omega_d");
      Eigen::Matrix<double, -1, 1> tau_d;
      tau_d = Eigen::Matrix<double, -1, 1>(l_Ldeta_cor);
      stan::math::fill(tau_d, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 18;
      tau_d = in__.vector(l_Ldeta_cor);
      current_statement__ = 18;
      for (int sym1__ = 1; sym1__ <= l_Ldeta_cor; ++sym1__) {
        current_statement__ = 18;
        assign(tau_d, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(tau_d[(sym1__ - 1)], 0),
          "assigning variable tau_d");}
      std::vector<Eigen::Matrix<double, -1, 1>> zeta_c;
      zeta_c = std::vector<Eigen::Matrix<double, -1, 1>>(u_Lzeta_cor, Eigen::Matrix<double, -1, 1>(l_Lzeta_cor));
      stan::math::fill(zeta_c, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 19;
      for (int sym1__ = 1; sym1__ <= u_Lzeta_cor; ++sym1__) {
        current_statement__ = 19;
        assign(zeta_c, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(l_Lzeta_cor), "assigning variable zeta_c");}
      std::vector<Eigen::Matrix<double, -1, 1>> aeta_c;
      aeta_c = std::vector<Eigen::Matrix<double, -1, 1>>(u_Laeta_cor, Eigen::Matrix<double, -1, 1>(l_Laeta_cor));
      stan::math::fill(aeta_c, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 20;
      for (int sym1__ = 1; sym1__ <= u_Laeta_cor; ++sym1__) {
        current_statement__ = 20;
        assign(aeta_c, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(l_Laeta_cor), "assigning variable aeta_c");}
      std::vector<Eigen::Matrix<double, -1, 1>> deta_c;
      deta_c = std::vector<Eigen::Matrix<double, -1, 1>>(u_Ldeta_cor, Eigen::Matrix<double, -1, 1>(l_Ldeta_cor));
      stan::math::fill(deta_c, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 21;
      for (int sym1__ = 1; sym1__ <= u_Ldeta_cor; ++sym1__) {
        current_statement__ = 21;
        assign(deta_c, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(l_Ldeta_cor), "assigning variable deta_c");}
      Eigen::Matrix<double, -1, -1> alpha;
      alpha = Eigen::Matrix<double, -1, -1>(D, J);
      stan::math::fill(alpha, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> beta;
      beta = Eigen::Matrix<double, -1, -1>(K, D);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> zeta;
      zeta = Eigen::Matrix<double, -1, -1>(Lzeta, D);
      stan::math::fill(zeta, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> delta_trans;
      delta_trans = std::vector<Eigen::Matrix<double, -1, 1>>(J, Eigen::Matrix<double, -1, 1>(delta_trans_2dim__));
      stan::math::fill(delta_trans, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(theta,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "theta"));}}
      for (int sym1__ = 1; sym1__ <= nDelta; ++sym1__) {
        vars__.emplace_back(delta_l[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nDelta_r; ++sym1__) {
        vars__.emplace_back(delta_r_l[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        vars__.emplace_back(alpha_l[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nAlpha_r; ++sym1__) {
        vars__.emplace_back(alpha_r_l[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(beta_l[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Lzeta; ++sym1__) {
        vars__.emplace_back(zeta_l[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Lzeta_sd; ++sym1__) {
        vars__.emplace_back(zeta_l_sd[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Laeta; ++sym1__) {
        vars__.emplace_back(aeta_l[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Laeta_sd; ++sym1__) {
        vars__.emplace_back(aeta_l_sd[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Ldeta; ++sym1__) {
        vars__.emplace_back(deta_l[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Ldeta_sd; ++sym1__) {
        vars__.emplace_back(deta_l_sd[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= l_Lzeta_cor; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= l_Lzeta_cor; ++sym2__) {
          vars__.emplace_back(
            rvalue(Omega,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "Omega"));}}
      for (int sym1__ = 1; sym1__ <= l_Lzeta_cor; ++sym1__) {
        vars__.emplace_back(tau[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= l_Laeta_cor; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= l_Laeta_cor; ++sym2__) {
          vars__.emplace_back(
            rvalue(Omega_a,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "Omega_a"));
        }}
      for (int sym1__ = 1; sym1__ <= l_Laeta_cor; ++sym1__) {
        vars__.emplace_back(tau_a[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= l_Ldeta_cor; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= l_Ldeta_cor; ++sym2__) {
          vars__.emplace_back(
            rvalue(Omega_d,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "Omega_d"));
        }}
      for (int sym1__ = 1; sym1__ <= l_Ldeta_cor; ++sym1__) {
        vars__.emplace_back(tau_d[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= l_Lzeta_cor; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= u_Lzeta_cor; ++sym2__) {
          vars__.emplace_back(zeta_c[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= l_Laeta_cor; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= u_Laeta_cor; ++sym2__) {
          vars__.emplace_back(aeta_c[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= l_Ldeta_cor; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= u_Ldeta_cor; ++sym2__) {
          vars__.emplace_back(deta_c[(sym2__ - 1)][(sym1__ - 1)]);}}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      {
        int index;
        index = std::numeric_limits<int>::min();
        
        current_statement__ = 26;
        index = 0;
        current_statement__ = 32;
        for (int d = 1; d <= D; ++d) {
          current_statement__ = 30;
          for (int j = d; j <= J; ++j) {
            current_statement__ = 27;
            index = (index + 1);
            current_statement__ = 28;
            assign(alpha,
              cons_list(index_uni(d),
                cons_list(index_uni(j), nil_index_list())),
              alpha_l[(index - 1)], "assigning variable alpha");}}
      }
      {
        current_statement__ = 46;
        if (has_treg) {
          int bindex;
          bindex = std::numeric_limits<int>::min();
          
          current_statement__ = 34;
          bindex = 0;
          int b_lower;
          b_lower = std::numeric_limits<int>::min();
          
          current_statement__ = 35;
          b_lower = 0;
          int b_upper;
          b_upper = std::numeric_limits<int>::min();
          
          current_statement__ = 36;
          b_upper = 0;
          current_statement__ = 44;
          for (int d = 1; d <= D; ++d) {
            current_statement__ = 37;
            b_lower = beta_dstart[(d - 1)];
            current_statement__ = 38;
            b_upper = beta_dend[(d - 1)];
            current_statement__ = 42;
            for (int i = b_lower; i <= b_upper; ++i) {
              current_statement__ = 39;
              bindex = (bindex + 1);
              current_statement__ = 40;
              assign(beta,
                cons_list(index_uni(i),
                  cons_list(index_uni(d), nil_index_list())),
                beta_l[(bindex - 1)], "assigning variable beta");}}
        } 
      }
      {
        current_statement__ = 60;
        if (any_rand_ind) {
          int zindex;
          zindex = std::numeric_limits<int>::min();
          
          current_statement__ = 48;
          zindex = 0;
          int z_lower;
          z_lower = std::numeric_limits<int>::min();
          
          current_statement__ = 49;
          z_lower = 0;
          int z_upper;
          z_upper = std::numeric_limits<int>::min();
          
          current_statement__ = 50;
          z_upper = 0;
          current_statement__ = 58;
          for (int d = 1; d <= D; ++d) {
            current_statement__ = 51;
            z_lower = zeta_dstart[(d - 1)];
            current_statement__ = 52;
            z_upper = zeta_dend[(d - 1)];
            current_statement__ = 56;
            for (int i = z_lower; i <= z_upper; ++i) {
              current_statement__ = 53;
              zindex = (zindex + 1);
              current_statement__ = 54;
              assign(zeta,
                cons_list(index_uni(i),
                  cons_list(index_uni(d), nil_index_list())),
                (zeta_l[(zindex - 1)] *
                  zeta_l_sd[(zeta_sd_ind[(i - 1)] - 1)]),
                "assigning variable zeta");}}
        } 
      }
      {
        int idx;
        idx = std::numeric_limits<int>::min();
        
        current_statement__ = 62;
        idx = 0;
        int d_index;
        d_index = std::numeric_limits<int>::min();
        
        current_statement__ = 63;
        d_index = 0;
        current_statement__ = 75;
        for (int j = 1; j <= J; ++j) {
          current_statement__ = 64;
          validate_non_negative_index("ds_ind", "Ncategi[j] - 1",
                                      (Ncategi[(j - 1)] - 1));
          Eigen::Matrix<double, -1, 1> ds_ind;
          ds_ind = Eigen::Matrix<double, -1, 1>((Ncategi[(j - 1)] - 1));
          stan::math::fill(ds_ind, std::numeric_limits<double>::quiet_NaN());
          
          current_statement__ = 65;
          assign(ds_ind, nil_index_list(),
            sort_asc(
              rvalue(delta_l,
                cons_list(
                  index_min_max((d_index + 1), ((d_index + Ncategi[(j - 1)])
                                                 - 1)), nil_index_list()),
                "delta_l")), "assigning variable ds_ind");
          current_statement__ = 69;
          for (int i = 1; i <= (Ncategi[(j - 1)] - 1); ++i) {
            current_statement__ = 66;
            d_index = (d_index + 1);
            current_statement__ = 67;
            assign(delta_trans,
              cons_list(index_uni(j),
                cons_list(index_uni(i), nil_index_list())), ds_ind[(i - 1)],
              "assigning variable delta_trans");}
          current_statement__ = 73;
          for (int i = Ncategi[(j - 1)]; i <= (Ncateg_max - 1); ++i) {
            current_statement__ = 70;
            assign(delta_trans,
              cons_list(index_uni(j),
                cons_list(index_uni(i), nil_index_list())), (1e7 + idx),
              "assigning variable delta_trans");
            current_statement__ = 71;
            idx = (idx + 1);}}
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= D; ++sym2__) {
            vars__.emplace_back(
              rvalue(alpha,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "alpha"));
          }}
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            vars__.emplace_back(
              rvalue(beta,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "beta"));}
        }
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= Lzeta; ++sym2__) {
            vars__.emplace_back(
              rvalue(zeta,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "zeta"));}
        }
        for (int sym1__ = 1; sym1__ <= delta_trans_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
            vars__.emplace_back(delta_trans[(sym2__ - 1)][(sym1__ - 1)]);}}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, -1> theta;
      theta = Eigen::Matrix<double, -1, -1>(N, D);
      stan::math::fill(theta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> theta_flat__;
        current_statement__ = 1;
        assign(theta_flat__, nil_index_list(), context__.vals_r("theta"),
          "assigning variable theta_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 1;
            assign(theta,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              theta_flat__[(pos__ - 1)], "assigning variable theta");
            current_statement__ = 1;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> delta_l;
      delta_l = Eigen::Matrix<double, -1, 1>(nDelta);
      stan::math::fill(delta_l, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> delta_l_flat__;
        current_statement__ = 2;
        assign(delta_l_flat__, nil_index_list(), context__.vals_r("delta_l"),
          "assigning variable delta_l_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= nDelta; ++sym1__) {
          current_statement__ = 2;
          assign(delta_l, cons_list(index_uni(sym1__), nil_index_list()),
            delta_l_flat__[(pos__ - 1)], "assigning variable delta_l");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> delta_r_l;
      delta_r_l = Eigen::Matrix<double, -1, 1>(nDelta_r);
      stan::math::fill(delta_r_l, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> delta_r_l_flat__;
        current_statement__ = 3;
        assign(delta_r_l_flat__, nil_index_list(),
          context__.vals_r("delta_r_l"),
          "assigning variable delta_r_l_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= nDelta_r; ++sym1__) {
          current_statement__ = 3;
          assign(delta_r_l, cons_list(index_uni(sym1__), nil_index_list()),
            delta_r_l_flat__[(pos__ - 1)], "assigning variable delta_r_l");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> alpha_l;
      alpha_l = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(alpha_l, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> alpha_l_flat__;
        current_statement__ = 4;
        assign(alpha_l_flat__, nil_index_list(), context__.vals_r("alpha_l"),
          "assigning variable alpha_l_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 4;
          assign(alpha_l, cons_list(index_uni(sym1__), nil_index_list()),
            alpha_l_flat__[(pos__ - 1)], "assigning variable alpha_l");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> alpha_l_free__;
      alpha_l_free__ = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(alpha_l_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 4;
        assign(alpha_l_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(alpha_l[(sym1__ - 1)], 0),
          "assigning variable alpha_l_free__");}
      Eigen::Matrix<double, -1, 1> alpha_r_l;
      alpha_r_l = Eigen::Matrix<double, -1, 1>(nAlpha_r);
      stan::math::fill(alpha_r_l, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> alpha_r_l_flat__;
        current_statement__ = 5;
        assign(alpha_r_l_flat__, nil_index_list(),
          context__.vals_r("alpha_r_l"),
          "assigning variable alpha_r_l_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= nAlpha_r; ++sym1__) {
          current_statement__ = 5;
          assign(alpha_r_l, cons_list(index_uni(sym1__), nil_index_list()),
            alpha_r_l_flat__[(pos__ - 1)], "assigning variable alpha_r_l");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> beta_l;
      beta_l = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(beta_l, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_l_flat__;
        current_statement__ = 6;
        assign(beta_l_flat__, nil_index_list(), context__.vals_r("beta_l"),
          "assigning variable beta_l_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 6;
          assign(beta_l, cons_list(index_uni(sym1__), nil_index_list()),
            beta_l_flat__[(pos__ - 1)], "assigning variable beta_l");
          current_statement__ = 6;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> zeta_l;
      zeta_l = Eigen::Matrix<double, -1, 1>(Lzeta);
      stan::math::fill(zeta_l, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> zeta_l_flat__;
        current_statement__ = 7;
        assign(zeta_l_flat__, nil_index_list(), context__.vals_r("zeta_l"),
          "assigning variable zeta_l_flat__");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= Lzeta; ++sym1__) {
          current_statement__ = 7;
          assign(zeta_l, cons_list(index_uni(sym1__), nil_index_list()),
            zeta_l_flat__[(pos__ - 1)], "assigning variable zeta_l");
          current_statement__ = 7;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> zeta_l_sd;
      zeta_l_sd = Eigen::Matrix<double, -1, 1>(Lzeta_sd);
      stan::math::fill(zeta_l_sd, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> zeta_l_sd_flat__;
        current_statement__ = 8;
        assign(zeta_l_sd_flat__, nil_index_list(),
          context__.vals_r("zeta_l_sd"),
          "assigning variable zeta_l_sd_flat__");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= Lzeta_sd; ++sym1__) {
          current_statement__ = 8;
          assign(zeta_l_sd, cons_list(index_uni(sym1__), nil_index_list()),
            zeta_l_sd_flat__[(pos__ - 1)], "assigning variable zeta_l_sd");
          current_statement__ = 8;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> zeta_l_sd_free__;
      zeta_l_sd_free__ = Eigen::Matrix<double, -1, 1>(Lzeta_sd);
      stan::math::fill(zeta_l_sd_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= Lzeta_sd; ++sym1__) {
        current_statement__ = 8;
        assign(zeta_l_sd_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(zeta_l_sd[(sym1__ - 1)], 0),
          "assigning variable zeta_l_sd_free__");}
      Eigen::Matrix<double, -1, 1> aeta_l;
      aeta_l = Eigen::Matrix<double, -1, 1>(Laeta);
      stan::math::fill(aeta_l, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> aeta_l_flat__;
        current_statement__ = 9;
        assign(aeta_l_flat__, nil_index_list(), context__.vals_r("aeta_l"),
          "assigning variable aeta_l_flat__");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= Laeta; ++sym1__) {
          current_statement__ = 9;
          assign(aeta_l, cons_list(index_uni(sym1__), nil_index_list()),
            aeta_l_flat__[(pos__ - 1)], "assigning variable aeta_l");
          current_statement__ = 9;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> aeta_l_sd;
      aeta_l_sd = Eigen::Matrix<double, -1, 1>(Laeta_sd);
      stan::math::fill(aeta_l_sd, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> aeta_l_sd_flat__;
        current_statement__ = 10;
        assign(aeta_l_sd_flat__, nil_index_list(),
          context__.vals_r("aeta_l_sd"),
          "assigning variable aeta_l_sd_flat__");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= Laeta_sd; ++sym1__) {
          current_statement__ = 10;
          assign(aeta_l_sd, cons_list(index_uni(sym1__), nil_index_list()),
            aeta_l_sd_flat__[(pos__ - 1)], "assigning variable aeta_l_sd");
          current_statement__ = 10;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> aeta_l_sd_free__;
      aeta_l_sd_free__ = Eigen::Matrix<double, -1, 1>(Laeta_sd);
      stan::math::fill(aeta_l_sd_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= Laeta_sd; ++sym1__) {
        current_statement__ = 10;
        assign(aeta_l_sd_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(aeta_l_sd[(sym1__ - 1)], 0),
          "assigning variable aeta_l_sd_free__");}
      Eigen::Matrix<double, -1, 1> deta_l;
      deta_l = Eigen::Matrix<double, -1, 1>(Ldeta);
      stan::math::fill(deta_l, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> deta_l_flat__;
        current_statement__ = 11;
        assign(deta_l_flat__, nil_index_list(), context__.vals_r("deta_l"),
          "assigning variable deta_l_flat__");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= Ldeta; ++sym1__) {
          current_statement__ = 11;
          assign(deta_l, cons_list(index_uni(sym1__), nil_index_list()),
            deta_l_flat__[(pos__ - 1)], "assigning variable deta_l");
          current_statement__ = 11;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> deta_l_sd;
      deta_l_sd = Eigen::Matrix<double, -1, 1>(Ldeta_sd);
      stan::math::fill(deta_l_sd, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> deta_l_sd_flat__;
        current_statement__ = 12;
        assign(deta_l_sd_flat__, nil_index_list(),
          context__.vals_r("deta_l_sd"),
          "assigning variable deta_l_sd_flat__");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= Ldeta_sd; ++sym1__) {
          current_statement__ = 12;
          assign(deta_l_sd, cons_list(index_uni(sym1__), nil_index_list()),
            deta_l_sd_flat__[(pos__ - 1)], "assigning variable deta_l_sd");
          current_statement__ = 12;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> deta_l_sd_free__;
      deta_l_sd_free__ = Eigen::Matrix<double, -1, 1>(Ldeta_sd);
      stan::math::fill(deta_l_sd_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= Ldeta_sd; ++sym1__) {
        current_statement__ = 12;
        assign(deta_l_sd_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(deta_l_sd[(sym1__ - 1)], 0),
          "assigning variable deta_l_sd_free__");}
      Eigen::Matrix<double, -1, -1> Omega;
      Omega = Eigen::Matrix<double, -1, -1>(l_Lzeta_cor, l_Lzeta_cor);
      stan::math::fill(Omega, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Omega_flat__;
        current_statement__ = 13;
        assign(Omega_flat__, nil_index_list(), context__.vals_r("Omega"),
          "assigning variable Omega_flat__");
        current_statement__ = 13;
        pos__ = 1;
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= l_Lzeta_cor; ++sym1__) {
          current_statement__ = 13;
          for (int sym2__ = 1; sym2__ <= l_Lzeta_cor; ++sym2__) {
            current_statement__ = 13;
            assign(Omega,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              Omega_flat__[(pos__ - 1)], "assigning variable Omega");
            current_statement__ = 13;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> Omega_free__;
      Omega_free__ = Eigen::Matrix<double, -1, 1>(((l_Lzeta_cor *
                                                     (l_Lzeta_cor - 1)) / 2));
      stan::math::fill(Omega_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 13;
      assign(Omega_free__, nil_index_list(),
        stan::math::corr_matrix_free(Omega),
        "assigning variable Omega_free__");
      Eigen::Matrix<double, -1, 1> tau;
      tau = Eigen::Matrix<double, -1, 1>(l_Lzeta_cor);
      stan::math::fill(tau, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> tau_flat__;
        current_statement__ = 14;
        assign(tau_flat__, nil_index_list(), context__.vals_r("tau"),
          "assigning variable tau_flat__");
        current_statement__ = 14;
        pos__ = 1;
        current_statement__ = 14;
        for (int sym1__ = 1; sym1__ <= l_Lzeta_cor; ++sym1__) {
          current_statement__ = 14;
          assign(tau, cons_list(index_uni(sym1__), nil_index_list()),
            tau_flat__[(pos__ - 1)], "assigning variable tau");
          current_statement__ = 14;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> tau_free__;
      tau_free__ = Eigen::Matrix<double, -1, 1>(l_Lzeta_cor);
      stan::math::fill(tau_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= l_Lzeta_cor; ++sym1__) {
        current_statement__ = 14;
        assign(tau_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(tau[(sym1__ - 1)], 0),
          "assigning variable tau_free__");}
      Eigen::Matrix<double, -1, -1> Omega_a;
      Omega_a = Eigen::Matrix<double, -1, -1>(l_Laeta_cor, l_Laeta_cor);
      stan::math::fill(Omega_a, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Omega_a_flat__;
        current_statement__ = 15;
        assign(Omega_a_flat__, nil_index_list(), context__.vals_r("Omega_a"),
          "assigning variable Omega_a_flat__");
        current_statement__ = 15;
        pos__ = 1;
        current_statement__ = 15;
        for (int sym1__ = 1; sym1__ <= l_Laeta_cor; ++sym1__) {
          current_statement__ = 15;
          for (int sym2__ = 1; sym2__ <= l_Laeta_cor; ++sym2__) {
            current_statement__ = 15;
            assign(Omega_a,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              Omega_a_flat__[(pos__ - 1)], "assigning variable Omega_a");
            current_statement__ = 15;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> Omega_a_free__;
      Omega_a_free__ = Eigen::Matrix<double, -1, 1>(((l_Laeta_cor *
                                                       (l_Laeta_cor - 1)) /
                                                      2));
      stan::math::fill(Omega_a_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 15;
      assign(Omega_a_free__, nil_index_list(),
        stan::math::corr_matrix_free(Omega_a),
        "assigning variable Omega_a_free__");
      Eigen::Matrix<double, -1, 1> tau_a;
      tau_a = Eigen::Matrix<double, -1, 1>(l_Laeta_cor);
      stan::math::fill(tau_a, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> tau_a_flat__;
        current_statement__ = 16;
        assign(tau_a_flat__, nil_index_list(), context__.vals_r("tau_a"),
          "assigning variable tau_a_flat__");
        current_statement__ = 16;
        pos__ = 1;
        current_statement__ = 16;
        for (int sym1__ = 1; sym1__ <= l_Laeta_cor; ++sym1__) {
          current_statement__ = 16;
          assign(tau_a, cons_list(index_uni(sym1__), nil_index_list()),
            tau_a_flat__[(pos__ - 1)], "assigning variable tau_a");
          current_statement__ = 16;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> tau_a_free__;
      tau_a_free__ = Eigen::Matrix<double, -1, 1>(l_Laeta_cor);
      stan::math::fill(tau_a_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 16;
      for (int sym1__ = 1; sym1__ <= l_Laeta_cor; ++sym1__) {
        current_statement__ = 16;
        assign(tau_a_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(tau_a[(sym1__ - 1)], 0),
          "assigning variable tau_a_free__");}
      Eigen::Matrix<double, -1, -1> Omega_d;
      Omega_d = Eigen::Matrix<double, -1, -1>(l_Ldeta_cor, l_Ldeta_cor);
      stan::math::fill(Omega_d, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Omega_d_flat__;
        current_statement__ = 17;
        assign(Omega_d_flat__, nil_index_list(), context__.vals_r("Omega_d"),
          "assigning variable Omega_d_flat__");
        current_statement__ = 17;
        pos__ = 1;
        current_statement__ = 17;
        for (int sym1__ = 1; sym1__ <= l_Ldeta_cor; ++sym1__) {
          current_statement__ = 17;
          for (int sym2__ = 1; sym2__ <= l_Ldeta_cor; ++sym2__) {
            current_statement__ = 17;
            assign(Omega_d,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              Omega_d_flat__[(pos__ - 1)], "assigning variable Omega_d");
            current_statement__ = 17;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> Omega_d_free__;
      Omega_d_free__ = Eigen::Matrix<double, -1, 1>(((l_Ldeta_cor *
                                                       (l_Ldeta_cor - 1)) /
                                                      2));
      stan::math::fill(Omega_d_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 17;
      assign(Omega_d_free__, nil_index_list(),
        stan::math::corr_matrix_free(Omega_d),
        "assigning variable Omega_d_free__");
      Eigen::Matrix<double, -1, 1> tau_d;
      tau_d = Eigen::Matrix<double, -1, 1>(l_Ldeta_cor);
      stan::math::fill(tau_d, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> tau_d_flat__;
        current_statement__ = 18;
        assign(tau_d_flat__, nil_index_list(), context__.vals_r("tau_d"),
          "assigning variable tau_d_flat__");
        current_statement__ = 18;
        pos__ = 1;
        current_statement__ = 18;
        for (int sym1__ = 1; sym1__ <= l_Ldeta_cor; ++sym1__) {
          current_statement__ = 18;
          assign(tau_d, cons_list(index_uni(sym1__), nil_index_list()),
            tau_d_flat__[(pos__ - 1)], "assigning variable tau_d");
          current_statement__ = 18;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> tau_d_free__;
      tau_d_free__ = Eigen::Matrix<double, -1, 1>(l_Ldeta_cor);
      stan::math::fill(tau_d_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 18;
      for (int sym1__ = 1; sym1__ <= l_Ldeta_cor; ++sym1__) {
        current_statement__ = 18;
        assign(tau_d_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(tau_d[(sym1__ - 1)], 0),
          "assigning variable tau_d_free__");}
      std::vector<Eigen::Matrix<double, -1, 1>> zeta_c;
      zeta_c = std::vector<Eigen::Matrix<double, -1, 1>>(u_Lzeta_cor, Eigen::Matrix<double, -1, 1>(l_Lzeta_cor));
      stan::math::fill(zeta_c, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> zeta_c_flat__;
        current_statement__ = 19;
        assign(zeta_c_flat__, nil_index_list(), context__.vals_r("zeta_c"),
          "assigning variable zeta_c_flat__");
        current_statement__ = 19;
        pos__ = 1;
        current_statement__ = 19;
        for (int sym1__ = 1; sym1__ <= l_Lzeta_cor; ++sym1__) {
          current_statement__ = 19;
          for (int sym2__ = 1; sym2__ <= u_Lzeta_cor; ++sym2__) {
            current_statement__ = 19;
            assign(zeta_c,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              zeta_c_flat__[(pos__ - 1)], "assigning variable zeta_c");
            current_statement__ = 19;
            pos__ = (pos__ + 1);}}
      }
      std::vector<Eigen::Matrix<double, -1, 1>> aeta_c;
      aeta_c = std::vector<Eigen::Matrix<double, -1, 1>>(u_Laeta_cor, Eigen::Matrix<double, -1, 1>(l_Laeta_cor));
      stan::math::fill(aeta_c, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> aeta_c_flat__;
        current_statement__ = 20;
        assign(aeta_c_flat__, nil_index_list(), context__.vals_r("aeta_c"),
          "assigning variable aeta_c_flat__");
        current_statement__ = 20;
        pos__ = 1;
        current_statement__ = 20;
        for (int sym1__ = 1; sym1__ <= l_Laeta_cor; ++sym1__) {
          current_statement__ = 20;
          for (int sym2__ = 1; sym2__ <= u_Laeta_cor; ++sym2__) {
            current_statement__ = 20;
            assign(aeta_c,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              aeta_c_flat__[(pos__ - 1)], "assigning variable aeta_c");
            current_statement__ = 20;
            pos__ = (pos__ + 1);}}
      }
      std::vector<Eigen::Matrix<double, -1, 1>> deta_c;
      deta_c = std::vector<Eigen::Matrix<double, -1, 1>>(u_Ldeta_cor, Eigen::Matrix<double, -1, 1>(l_Ldeta_cor));
      stan::math::fill(deta_c, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> deta_c_flat__;
        current_statement__ = 21;
        assign(deta_c_flat__, nil_index_list(), context__.vals_r("deta_c"),
          "assigning variable deta_c_flat__");
        current_statement__ = 21;
        pos__ = 1;
        current_statement__ = 21;
        for (int sym1__ = 1; sym1__ <= l_Ldeta_cor; ++sym1__) {
          current_statement__ = 21;
          for (int sym2__ = 1; sym2__ <= u_Ldeta_cor; ++sym2__) {
            current_statement__ = 21;
            assign(deta_c,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              deta_c_flat__[(pos__ - 1)], "assigning variable deta_c");
            current_statement__ = 21;
            pos__ = (pos__ + 1);}}
      }
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(theta,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "theta"));}}
      for (int sym1__ = 1; sym1__ <= nDelta; ++sym1__) {
        vars__.emplace_back(delta_l[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nDelta_r; ++sym1__) {
        vars__.emplace_back(delta_r_l[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        vars__.emplace_back(alpha_l_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nAlpha_r; ++sym1__) {
        vars__.emplace_back(alpha_r_l[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(beta_l[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Lzeta; ++sym1__) {
        vars__.emplace_back(zeta_l[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Lzeta_sd; ++sym1__) {
        vars__.emplace_back(zeta_l_sd_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Laeta; ++sym1__) {
        vars__.emplace_back(aeta_l[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Laeta_sd; ++sym1__) {
        vars__.emplace_back(aeta_l_sd_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Ldeta; ++sym1__) {
        vars__.emplace_back(deta_l[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Ldeta_sd; ++sym1__) {
        vars__.emplace_back(deta_l_sd_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= ((l_Lzeta_cor * (l_Lzeta_cor - 1)) / 2);
           ++sym1__) { vars__.emplace_back(Omega_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= l_Lzeta_cor; ++sym1__) {
        vars__.emplace_back(tau_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= ((l_Laeta_cor * (l_Laeta_cor - 1)) / 2);
           ++sym1__) { vars__.emplace_back(Omega_a_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= l_Laeta_cor; ++sym1__) {
        vars__.emplace_back(tau_a_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= ((l_Ldeta_cor * (l_Ldeta_cor - 1)) / 2);
           ++sym1__) { vars__.emplace_back(Omega_d_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= l_Ldeta_cor; ++sym1__) {
        vars__.emplace_back(tau_d_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= u_Lzeta_cor; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= l_Lzeta_cor; ++sym2__) {
          vars__.emplace_back(zeta_c[(sym1__ - 1)][(sym2__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= u_Laeta_cor; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= l_Laeta_cor; ++sym2__) {
          vars__.emplace_back(aeta_c[(sym1__ - 1)][(sym2__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= u_Ldeta_cor; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= l_Ldeta_cor; ++sym2__) {
          vars__.emplace_back(deta_c[(sym1__ - 1)][(sym2__ - 1)]);}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("theta");
    names__.emplace_back("delta_l");
    names__.emplace_back("delta_r_l");
    names__.emplace_back("alpha_l");
    names__.emplace_back("alpha_r_l");
    names__.emplace_back("beta_l");
    names__.emplace_back("zeta_l");
    names__.emplace_back("zeta_l_sd");
    names__.emplace_back("aeta_l");
    names__.emplace_back("aeta_l_sd");
    names__.emplace_back("deta_l");
    names__.emplace_back("deta_l_sd");
    names__.emplace_back("Omega");
    names__.emplace_back("tau");
    names__.emplace_back("Omega_a");
    names__.emplace_back("tau_a");
    names__.emplace_back("Omega_d");
    names__.emplace_back("tau_d");
    names__.emplace_back("zeta_c");
    names__.emplace_back("aeta_c");
    names__.emplace_back("deta_c");
    names__.emplace_back("alpha");
    names__.emplace_back("beta");
    names__.emplace_back("zeta");
    names__.emplace_back("delta_trans");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(D)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nDelta)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nDelta_r)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(L)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nAlpha_r)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Lzeta)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Lzeta_sd)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Laeta)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Laeta_sd)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Ldeta)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Ldeta_sd)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(l_Lzeta_cor)
                                             ,
                                             static_cast<size_t>(l_Lzeta_cor)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(l_Lzeta_cor)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(l_Laeta_cor)
                                             ,
                                             static_cast<size_t>(l_Laeta_cor)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(l_Laeta_cor)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(l_Ldeta_cor)
                                             ,
                                             static_cast<size_t>(l_Ldeta_cor)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(l_Ldeta_cor)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(u_Lzeta_cor)
                                             ,
                                             static_cast<size_t>(l_Lzeta_cor)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(u_Laeta_cor)
                                             ,
                                             static_cast<size_t>(l_Laeta_cor)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(u_Ldeta_cor)
                                             ,
                                             static_cast<size_t>(l_Ldeta_cor)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(D),
                                             static_cast<size_t>(J)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K),
                                             static_cast<size_t>(D)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Lzeta),
                                             static_cast<size_t>(D)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J),
                                             static_cast<size_t>(delta_trans_2dim__)
                                             });
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= nDelta; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "delta_l" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nDelta_r; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "delta_r_l" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha_l" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nAlpha_r; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha_r_l" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_l" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Lzeta; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "zeta_l" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Lzeta_sd; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "zeta_l_sd" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Laeta; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "aeta_l" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Laeta_sd; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "aeta_l_sd" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Ldeta; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "deta_l" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Ldeta_sd; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "deta_l_sd" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= l_Lzeta_cor; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= l_Lzeta_cor; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "Omega" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= l_Lzeta_cor; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "tau" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= l_Laeta_cor; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= l_Laeta_cor; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "Omega_a" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= l_Laeta_cor; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "tau_a" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= l_Ldeta_cor; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= l_Ldeta_cor; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "Omega_d" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= l_Ldeta_cor; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "tau_d" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= l_Lzeta_cor; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= u_Lzeta_cor; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "zeta_c" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= l_Laeta_cor; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= u_Laeta_cor; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "aeta_c" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= l_Ldeta_cor; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= u_Ldeta_cor; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "deta_c" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= D; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Lzeta; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "zeta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= delta_trans_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "delta_trans" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= nDelta; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "delta_l" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nDelta_r; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "delta_r_l" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha_l" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nAlpha_r; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha_r_l" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_l" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Lzeta; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "zeta_l" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Lzeta_sd; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "zeta_l_sd" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Laeta; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "aeta_l" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Laeta_sd; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "aeta_l_sd" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Ldeta; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "deta_l" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Ldeta_sd; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "deta_l_sd" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= ((l_Lzeta_cor * (l_Lzeta_cor - 1)) / 2);
         ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "Omega" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= l_Lzeta_cor; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "tau" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= ((l_Laeta_cor * (l_Laeta_cor - 1)) / 2);
         ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "Omega_a" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= l_Laeta_cor; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "tau_a" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= ((l_Ldeta_cor * (l_Ldeta_cor - 1)) / 2);
         ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "Omega_d" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= l_Ldeta_cor; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "tau_d" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= l_Lzeta_cor; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= u_Lzeta_cor; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "zeta_c" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= l_Laeta_cor; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= u_Laeta_cor; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "aeta_c" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= l_Ldeta_cor; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= u_Ldeta_cor; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "deta_c" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= D; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Lzeta; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "zeta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= delta_trans_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "delta_trans" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"theta\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << D << "},\"block\":\"parameters\"},{\"name\":\"delta_l\",\"type\":{\"name\":\"vector\",\"length\":" << nDelta << "},\"block\":\"parameters\"},{\"name\":\"delta_r_l\",\"type\":{\"name\":\"vector\",\"length\":" << nDelta_r << "},\"block\":\"parameters\"},{\"name\":\"alpha_l\",\"type\":{\"name\":\"vector\",\"length\":" << L << "},\"block\":\"parameters\"},{\"name\":\"alpha_r_l\",\"type\":{\"name\":\"vector\",\"length\":" << nAlpha_r << "},\"block\":\"parameters\"},{\"name\":\"beta_l\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"zeta_l\",\"type\":{\"name\":\"vector\",\"length\":" << Lzeta << "},\"block\":\"parameters\"},{\"name\":\"zeta_l_sd\",\"type\":{\"name\":\"vector\",\"length\":" << Lzeta_sd << "},\"block\":\"parameters\"},{\"name\":\"aeta_l\",\"type\":{\"name\":\"vector\",\"length\":" << Laeta << "},\"block\":\"parameters\"},{\"name\":\"aeta_l_sd\",\"type\":{\"name\":\"vector\",\"length\":" << Laeta_sd << "},\"block\":\"parameters\"},{\"name\":\"deta_l\",\"type\":{\"name\":\"vector\",\"length\":" << Ldeta << "},\"block\":\"parameters\"},{\"name\":\"deta_l_sd\",\"type\":{\"name\":\"vector\",\"length\":" << Ldeta_sd << "},\"block\":\"parameters\"},{\"name\":\"Omega\",\"type\":{\"name\":\"matrix\",\"rows\":" << l_Lzeta_cor << ",\"cols\":" << l_Lzeta_cor << "},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" << l_Lzeta_cor << "},\"block\":\"parameters\"},{\"name\":\"Omega_a\",\"type\":{\"name\":\"matrix\",\"rows\":" << l_Laeta_cor << ",\"cols\":" << l_Laeta_cor << "},\"block\":\"parameters\"},{\"name\":\"tau_a\",\"type\":{\"name\":\"vector\",\"length\":" << l_Laeta_cor << "},\"block\":\"parameters\"},{\"name\":\"Omega_d\",\"type\":{\"name\":\"matrix\",\"rows\":" << l_Ldeta_cor << ",\"cols\":" << l_Ldeta_cor << "},\"block\":\"parameters\"},{\"name\":\"tau_d\",\"type\":{\"name\":\"vector\",\"length\":" << l_Ldeta_cor << "},\"block\":\"parameters\"},{\"name\":\"zeta_c\",\"type\":{\"name\":\"array\",\"length\":" << u_Lzeta_cor << ",\"element_type\":{\"name\":\"vector\",\"length\":" << l_Lzeta_cor << "}},\"block\":\"parameters\"},{\"name\":\"aeta_c\",\"type\":{\"name\":\"array\",\"length\":" << u_Laeta_cor << ",\"element_type\":{\"name\":\"vector\",\"length\":" << l_Laeta_cor << "}},\"block\":\"parameters\"},{\"name\":\"deta_c\",\"type\":{\"name\":\"array\",\"length\":" << u_Ldeta_cor << ",\"element_type\":{\"name\":\"vector\",\"length\":" << l_Ldeta_cor << "}},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"matrix\",\"rows\":" << D << ",\"cols\":" << J << "},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"matrix\",\"rows\":" << K << ",\"cols\":" << D << "},\"block\":\"transformed_parameters\"},{\"name\":\"zeta\",\"type\":{\"name\":\"matrix\",\"rows\":" << Lzeta << ",\"cols\":" << D << "},\"block\":\"transformed_parameters\"},{\"name\":\"delta_trans\",\"type\":{\"name\":\"array\",\"length\":" << J << ",\"element_type\":{\"name\":\"vector\",\"length\":" << delta_trans_2dim__ << "}},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"theta\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << D << "},\"block\":\"parameters\"},{\"name\":\"delta_l\",\"type\":{\"name\":\"vector\",\"length\":" << nDelta << "},\"block\":\"parameters\"},{\"name\":\"delta_r_l\",\"type\":{\"name\":\"vector\",\"length\":" << nDelta_r << "},\"block\":\"parameters\"},{\"name\":\"alpha_l\",\"type\":{\"name\":\"vector\",\"length\":" << L << "},\"block\":\"parameters\"},{\"name\":\"alpha_r_l\",\"type\":{\"name\":\"vector\",\"length\":" << nAlpha_r << "},\"block\":\"parameters\"},{\"name\":\"beta_l\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"zeta_l\",\"type\":{\"name\":\"vector\",\"length\":" << Lzeta << "},\"block\":\"parameters\"},{\"name\":\"zeta_l_sd\",\"type\":{\"name\":\"vector\",\"length\":" << Lzeta_sd << "},\"block\":\"parameters\"},{\"name\":\"aeta_l\",\"type\":{\"name\":\"vector\",\"length\":" << Laeta << "},\"block\":\"parameters\"},{\"name\":\"aeta_l_sd\",\"type\":{\"name\":\"vector\",\"length\":" << Laeta_sd << "},\"block\":\"parameters\"},{\"name\":\"deta_l\",\"type\":{\"name\":\"vector\",\"length\":" << Ldeta << "},\"block\":\"parameters\"},{\"name\":\"deta_l_sd\",\"type\":{\"name\":\"vector\",\"length\":" << Ldeta_sd << "},\"block\":\"parameters\"},{\"name\":\"Omega\",\"type\":{\"name\":\"vector\",\"length\":" << ((l_Lzeta_cor * (l_Lzeta_cor - 1)) / 2) << "},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" << l_Lzeta_cor << "},\"block\":\"parameters\"},{\"name\":\"Omega_a\",\"type\":{\"name\":\"vector\",\"length\":" << ((l_Laeta_cor * (l_Laeta_cor - 1)) / 2) << "},\"block\":\"parameters\"},{\"name\":\"tau_a\",\"type\":{\"name\":\"vector\",\"length\":" << l_Laeta_cor << "},\"block\":\"parameters\"},{\"name\":\"Omega_d\",\"type\":{\"name\":\"vector\",\"length\":" << ((l_Ldeta_cor * (l_Ldeta_cor - 1)) / 2) << "},\"block\":\"parameters\"},{\"name\":\"tau_d\",\"type\":{\"name\":\"vector\",\"length\":" << l_Ldeta_cor << "},\"block\":\"parameters\"},{\"name\":\"zeta_c\",\"type\":{\"name\":\"array\",\"length\":" << u_Lzeta_cor << ",\"element_type\":{\"name\":\"vector\",\"length\":" << l_Lzeta_cor << "}},\"block\":\"parameters\"},{\"name\":\"aeta_c\",\"type\":{\"name\":\"array\",\"length\":" << u_Laeta_cor << ",\"element_type\":{\"name\":\"vector\",\"length\":" << l_Laeta_cor << "}},\"block\":\"parameters\"},{\"name\":\"deta_c\",\"type\":{\"name\":\"array\",\"length\":" << u_Ldeta_cor << ",\"element_type\":{\"name\":\"vector\",\"length\":" << l_Ldeta_cor << "}},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"matrix\",\"rows\":" << D << ",\"cols\":" << J << "},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"matrix\",\"rows\":" << K << ",\"cols\":" << D << "},\"block\":\"transformed_parameters\"},{\"name\":\"zeta\",\"type\":{\"name\":\"matrix\",\"rows\":" << Lzeta << ",\"cols\":" << D << "},\"block\":\"transformed_parameters\"},{\"name\":\"delta_trans\",\"type\":{\"name\":\"array\",\"length\":" << J << ",\"element_type\":{\"name\":\"vector\",\"length\":" << delta_trans_2dim__ << "}},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_inirt_unidim_namespace::model_inirt_unidim;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_inirt_unidim_namespace::profiles__;
}
#endif
#endif
