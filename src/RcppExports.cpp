// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// amc
arma::vec amc(arma::mat& x, arma::vec x_start, int iter, int burn, int greedy_iterations, double a, arma::mat& data, int lp_select, arma::vec& accept, arma::vec validation_indexes, arma::vec validation_lower, int p_reg);
RcppExport SEXP _lmHOIRT_amc(SEXP xSEXP, SEXP x_startSEXP, SEXP iterSEXP, SEXP burnSEXP, SEXP greedy_iterationsSEXP, SEXP aSEXP, SEXP dataSEXP, SEXP lp_selectSEXP, SEXP acceptSEXP, SEXP validation_indexesSEXP, SEXP validation_lowerSEXP, SEXP p_regSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_start(x_startSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type greedy_iterations(greedy_iterationsSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type lp_select(lp_selectSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type accept(acceptSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type validation_indexes(validation_indexesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type validation_lower(validation_lowerSEXP);
    Rcpp::traits::input_parameter< int >::type p_reg(p_regSEXP);
    rcpp_result_gen = Rcpp::wrap(amc(x, x_start, iter, burn, greedy_iterations, a, data, lp_select, accept, validation_indexes, validation_lower, p_reg));
    return rcpp_result_gen;
END_RCPP
}
// lognorm_dens_dx
double lognorm_dens_dx(double x, double mean, double sd);
RcppExport SEXP _lmHOIRT_lognorm_dens_dx(SEXP xSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(lognorm_dens_dx(x, mean, sd));
    return rcpp_result_gen;
END_RCPP
}
// logtruncnorm_dens_dx
double logtruncnorm_dens_dx(double x, double mean, double sd, double a, double b);
RcppExport SEXP _lmHOIRT_logtruncnorm_dens_dx(SEXP xSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(logtruncnorm_dens_dx(x, mean, sd, a, b));
    return rcpp_result_gen;
END_RCPP
}
// log_normd_dx
double log_normd_dx(double x, double mean, double sd);
RcppExport SEXP _lmHOIRT_log_normd_dx(SEXP xSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(log_normd_dx(x, mean, sd));
    return rcpp_result_gen;
END_RCPP
}
// log_unifd_dx
double log_unifd_dx(double x, double l, double u);
RcppExport SEXP _lmHOIRT_log_unifd_dx(SEXP xSEXP, SEXP lSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(log_unifd_dx(x, l, u));
    return rcpp_result_gen;
END_RCPP
}
// min
double min(double a, double b);
RcppExport SEXP _lmHOIRT_min(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(min(a, b));
    return rcpp_result_gen;
END_RCPP
}
// lp_2pl_logit
double lp_2pl_logit(arma::vec& x, arma::mat& data);
RcppExport SEXP _lmHOIRT_lp_2pl_logit(SEXP xSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(lp_2pl_logit(x, data));
    return rcpp_result_gen;
END_RCPP
}
// lp_2pl_logit_reg
double lp_2pl_logit_reg(arma::vec& x, arma::mat& data, int p);
RcppExport SEXP _lmHOIRT_lp_2pl_logit_reg(SEXP xSEXP, SEXP dataSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(lp_2pl_logit_reg(x, data, p));
    return rcpp_result_gen;
END_RCPP
}
// validate_proposal
arma::vec validate_proposal(arma::vec proposal, arma::vec indexes, arma::vec lower);
RcppExport SEXP _lmHOIRT_validate_proposal(SEXP proposalSEXP, SEXP indexesSEXP, SEXP lowerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type proposal(proposalSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type indexes(indexesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lower(lowerSEXP);
    rcpp_result_gen = Rcpp::wrap(validate_proposal(proposal, indexes, lower));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_lmHOIRT_amc", (DL_FUNC) &_lmHOIRT_amc, 12},
    {"_lmHOIRT_lognorm_dens_dx", (DL_FUNC) &_lmHOIRT_lognorm_dens_dx, 3},
    {"_lmHOIRT_logtruncnorm_dens_dx", (DL_FUNC) &_lmHOIRT_logtruncnorm_dens_dx, 5},
    {"_lmHOIRT_log_normd_dx", (DL_FUNC) &_lmHOIRT_log_normd_dx, 3},
    {"_lmHOIRT_log_unifd_dx", (DL_FUNC) &_lmHOIRT_log_unifd_dx, 3},
    {"_lmHOIRT_min", (DL_FUNC) &_lmHOIRT_min, 2},
    {"_lmHOIRT_lp_2pl_logit", (DL_FUNC) &_lmHOIRT_lp_2pl_logit, 2},
    {"_lmHOIRT_lp_2pl_logit_reg", (DL_FUNC) &_lmHOIRT_lp_2pl_logit_reg, 3},
    {"_lmHOIRT_validate_proposal", (DL_FUNC) &_lmHOIRT_validate_proposal, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_lmHOIRT(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
