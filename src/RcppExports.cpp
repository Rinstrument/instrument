// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// lognorm_dens_dx
double lognorm_dens_dx(double x, double mean, double sd);
RcppExport SEXP _lmHOIRT_lognorm_dens_dx(SEXP xSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(lognorm_dens_dx(x, mean, sd));
    return rcpp_result_gen;
END_RCPP
}
// logtruncnorm_dens_dx
double logtruncnorm_dens_dx(double x, double mean, double sd, double a, double b);
RcppExport SEXP _lmHOIRT_logtruncnorm_dens_dx(SEXP xSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(logtruncnorm_dens_dx(x, mean, sd, a, b));
    return rcpp_result_gen;
END_RCPP
}
// log_normd_dx
double log_normd_dx(double x, double mean, double sd);
RcppExport SEXP _lmHOIRT_log_normd_dx(SEXP xSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(log_normd_dx(x, mean, sd));
    return rcpp_result_gen;
END_RCPP
}
// normd_dx
double normd_dx(double x, double mean, double sd);
RcppExport SEXP _lmHOIRT_normd_dx(SEXP xSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(normd_dx(x, mean, sd));
    return rcpp_result_gen;
END_RCPP
}
// log_unifd_dx
double log_unifd_dx(double x, double l, double u);
RcppExport SEXP _lmHOIRT_log_unifd_dx(SEXP xSEXP, SEXP lSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(log_unifd_dx(x, l, u));
    return rcpp_result_gen;
END_RCPP
}
// unifd_dx
double unifd_dx(double x, double l, double u);
RcppExport SEXP _lmHOIRT_unifd_dx(SEXP xSEXP, SEXP lSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(unifd_dx(x, l, u));
    return rcpp_result_gen;
END_RCPP
}
// logadd
double logadd(arma::vec x);
RcppExport SEXP _lmHOIRT_logadd(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logadd(x));
    return rcpp_result_gen;
END_RCPP
}
// min
double min(double a, double b);
RcppExport SEXP _lmHOIRT_min(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(min(a, b));
    return rcpp_result_gen;
END_RCPP
}
// r8poly_value_horner
double r8poly_value_horner(int m, arma::vec c, double x);
RcppExport SEXP _lmHOIRT_r8poly_value_horner(SEXP mSEXP, SEXP cSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(r8poly_value_horner(m, c, x));
    return rcpp_result_gen;
END_RCPP
}
// r8_uniform_01
double r8_uniform_01(int& seed);
RcppExport SEXP _lmHOIRT_r8_uniform_01(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int& >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(r8_uniform_01(seed));
    return rcpp_result_gen;
END_RCPP
}
// normal_01_sample
double normal_01_sample(int& seed);
RcppExport SEXP _lmHOIRT_normal_01_sample(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int& >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(normal_01_sample(seed));
    return rcpp_result_gen;
END_RCPP
}
// normal_01_cdf
double normal_01_cdf(double x);
RcppExport SEXP _lmHOIRT_normal_01_cdf(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(normal_01_cdf(x));
    return rcpp_result_gen;
END_RCPP
}
// normal_01_cdf_inv
double normal_01_cdf_inv(double p);
RcppExport SEXP _lmHOIRT_normal_01_cdf_inv(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(normal_01_cdf_inv(p));
    return rcpp_result_gen;
END_RCPP
}
// truncated_normal_ab_sample
double truncated_normal_ab_sample(double mu, double sigma, double a, double b, int& seed);
RcppExport SEXP _lmHOIRT_truncated_normal_ab_sample(SEXP muSEXP, SEXP sigmaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< int& >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(truncated_normal_ab_sample(mu, sigma, a, b, seed));
    return rcpp_result_gen;
END_RCPP
}
// sis_theta_model
arma::vec sis_theta_model(arma::mat& data, int n);
RcppExport SEXP _lmHOIRT_sis_theta_model(SEXP dataSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(sis_theta_model(data, n));
    return rcpp_result_gen;
END_RCPP
}
// sis_theta_model2
arma::vec sis_theta_model2(arma::mat& data, int n);
RcppExport SEXP _lmHOIRT_sis_theta_model2(SEXP dataSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(sis_theta_model2(data, n));
    return rcpp_result_gen;
END_RCPP
}
// sis3
arma::vec sis3(arma::mat& data, int n);
RcppExport SEXP _lmHOIRT_sis3(SEXP dataSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(sis3(data, n));
    return rcpp_result_gen;
END_RCPP
}
// validate_proposal
arma::vec validate_proposal(arma::vec proposal, arma::vec indexes, arma::vec lower, arma::vec upper);
RcppExport SEXP _lmHOIRT_validate_proposal(SEXP proposalSEXP, SEXP indexesSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type proposal(proposalSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type indexes(indexesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(validate_proposal(proposal, indexes, lower, upper));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_lmHOIRT_lognorm_dens_dx", (DL_FUNC) &_lmHOIRT_lognorm_dens_dx, 3},
    {"_lmHOIRT_logtruncnorm_dens_dx", (DL_FUNC) &_lmHOIRT_logtruncnorm_dens_dx, 5},
    {"_lmHOIRT_log_normd_dx", (DL_FUNC) &_lmHOIRT_log_normd_dx, 3},
    {"_lmHOIRT_normd_dx", (DL_FUNC) &_lmHOIRT_normd_dx, 3},
    {"_lmHOIRT_log_unifd_dx", (DL_FUNC) &_lmHOIRT_log_unifd_dx, 3},
    {"_lmHOIRT_unifd_dx", (DL_FUNC) &_lmHOIRT_unifd_dx, 3},
    {"_lmHOIRT_logadd", (DL_FUNC) &_lmHOIRT_logadd, 1},
    {"_lmHOIRT_min", (DL_FUNC) &_lmHOIRT_min, 2},
    {"_lmHOIRT_r8poly_value_horner", (DL_FUNC) &_lmHOIRT_r8poly_value_horner, 3},
    {"_lmHOIRT_r8_uniform_01", (DL_FUNC) &_lmHOIRT_r8_uniform_01, 1},
    {"_lmHOIRT_normal_01_sample", (DL_FUNC) &_lmHOIRT_normal_01_sample, 1},
    {"_lmHOIRT_normal_01_cdf", (DL_FUNC) &_lmHOIRT_normal_01_cdf, 1},
    {"_lmHOIRT_normal_01_cdf_inv", (DL_FUNC) &_lmHOIRT_normal_01_cdf_inv, 1},
    {"_lmHOIRT_truncated_normal_ab_sample", (DL_FUNC) &_lmHOIRT_truncated_normal_ab_sample, 5},
    {"_lmHOIRT_sis_theta_model", (DL_FUNC) &_lmHOIRT_sis_theta_model, 2},
    {"_lmHOIRT_sis_theta_model2", (DL_FUNC) &_lmHOIRT_sis_theta_model2, 2},
    {"_lmHOIRT_sis3", (DL_FUNC) &_lmHOIRT_sis3, 2},
    {"_lmHOIRT_validate_proposal", (DL_FUNC) &_lmHOIRT_validate_proposal, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_lmHOIRT(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
